{"ast":null,"code":"import { parser } from '@lezer/cpp';\nimport { LRLanguage, indentNodeProp, continuedIndent, flatIndent, delimitedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';\n/**\nA language provider based on the [Lezer C++\nparser](https://github.com/lezer-parser/cpp), extended with\nhighlighting and indentation information.\n*/\n\nvar cppLanguage = /*@__PURE__*/LRLanguage.define({\n  parser: /*@__PURE__*/parser.configure({\n    props: [/*@__PURE__*/indentNodeProp.add({\n      IfStatement: /*@__PURE__*/continuedIndent({\n        except: /^\\s*({|else\\b)/\n      }),\n      TryStatement: /*@__PURE__*/continuedIndent({\n        except: /^\\s*({|catch)\\b/\n      }),\n      LabeledStatement: flatIndent,\n      CaseStatement: function CaseStatement(context) {\n        return context.baseIndent + context.unit;\n      },\n      BlockComment: function BlockComment() {\n        return -1;\n      },\n      CompoundStatement: /*@__PURE__*/delimitedIndent({\n        closing: \"}\"\n      }),\n      Statement: /*@__PURE__*/continuedIndent({\n        except: /^{/\n      })\n    }), /*@__PURE__*/foldNodeProp.add({\n      \"DeclarationList CompoundStatement EnumeratorList FieldDeclarationList InitializerList\": foldInside,\n      BlockComment: function BlockComment(tree) {\n        return {\n          from: tree.from + 2,\n          to: tree.to - 2\n        };\n      }\n    })]\n  }),\n  languageData: {\n    commentTokens: {\n      line: \"//\",\n      block: {\n        open: \"/*\",\n        close: \"*/\"\n      }\n    },\n    indentOnInput: /^\\s*(?:case |default:|\\{|\\})$/\n  }\n});\n/**\nLanguage support for C++.\n*/\n\nfunction cpp() {\n  return new LanguageSupport(cppLanguage);\n}\n\nexport { cpp, cppLanguage };","map":null,"metadata":{},"sourceType":"module"}