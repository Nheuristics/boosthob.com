{"ast":null,"code":"import _slicedToArray from \"/home/ayaz/Projects/boosthub.com/front_bone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _createClass from \"/home/ayaz/Projects/boosthub.com/front_bone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/home/ayaz/Projects/boosthub.com/front_bone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n// FIXME profile adding a per-Tree TreeNode cache, validating it by\n// parent pointer\n/// The default maximum length of a `TreeBuffer` node.\nvar DefaultBufferLength = 1024;\nvar nextPropID = 0;\n\nvar Range = function Range(from, to) {\n  _classCallCheck(this, Range);\n\n  this.from = from;\n  this.to = to;\n}; /// Each [node type](#common.NodeType) or [individual tree](#common.Tree)\n/// can have metadata associated with it in props. Instances of this\n/// class represent prop names.\n\n\nvar NodeProp = /*#__PURE__*/function () {\n  /// Create a new node prop type.\n  function NodeProp() {\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, NodeProp);\n\n    this.id = nextPropID++;\n    this.perNode = !!config.perNode;\n\n    this.deserialize = config.deserialize || function () {\n      throw new Error(\"This node type doesn't define a deserialize function\");\n    };\n  } /// This is meant to be used with\n  /// [`NodeSet.extend`](#common.NodeSet.extend) or\n  /// [`LRParser.configure`](#lr.ParserConfig.props) to compute\n  /// prop values for each node type in the set. Takes a [match\n  /// object](#common.NodeType^match) or function that returns undefined\n  /// if the node type doesn't get this prop, and the prop's value if\n  /// it does.\n\n\n  _createClass(NodeProp, [{\n    key: \"add\",\n    value: function add(match) {\n      var _this = this;\n\n      if (this.perNode) throw new RangeError(\"Can't add per-node props to node types\");\n      if (typeof match != \"function\") match = NodeType.match(match);\n      return function (type) {\n        var result = match(type);\n        return result === undefined ? null : [_this, result];\n      };\n    }\n  }]);\n\n  return NodeProp;\n}(); /// Prop that is used to describe matching delimiters. For opening\n/// delimiters, this holds an array of node names (written as a\n/// space-separated string when declaring this prop in a grammar)\n/// for the node types of closing delimiters that match it.\n\n\nNodeProp.closedBy = new NodeProp({\n  deserialize: function deserialize(str) {\n    return str.split(\" \");\n  }\n}); /// The inverse of [`closedBy`](#common.NodeProp^closedBy). This is\n/// attached to closing delimiters, holding an array of node names\n/// of types of matching opening delimiters.\n\nNodeProp.openedBy = new NodeProp({\n  deserialize: function deserialize(str) {\n    return str.split(\" \");\n  }\n}); /// Used to assign node types to groups (for example, all node\n/// types that represent an expression could be tagged with an\n/// `\"Expression\"` group).\n\nNodeProp.group = new NodeProp({\n  deserialize: function deserialize(str) {\n    return str.split(\" \");\n  }\n}); /// The hash of the [context](#lr.ContextTracker.constructor)\n/// that the node was parsed in, if any. Used to limit reuse of\n/// contextual nodes.\n\nNodeProp.contextHash = new NodeProp({\n  perNode: true\n}); /// The distance beyond the end of the node that the tokenizer\n/// looked ahead for any of the tokens inside the node. (The LR\n/// parser only stores this when it is larger than 25, for\n/// efficiency reasons.)\n\nNodeProp.lookAhead = new NodeProp({\n  perNode: true\n}); /// This per-node prop is used to replace a given node, or part of a\n/// node, with another tree. This is useful to include trees from\n/// different languages in mixed-language parsers.\n\nNodeProp.mounted = new NodeProp({\n  perNode: true\n}); /// A mounted tree, which can be [stored](#common.NodeProp^mounted) on\n/// a tree node to indicate that parts of its content are\n/// represented by another tree.\n\nvar MountedTree = function MountedTree( /// The inner tree.\ntree, /// If this is null, this tree replaces the entire node (it will\n/// be included in the regular iteration instead of its host\n/// node). If not, only the given ranges are considered to be\n/// covered by this tree. This is used for trees that are mixed in\n/// a way that isn't strictly hierarchical. Such mounted trees are\n/// only entered by [`resolveInner`](#common.Tree.resolveInner)\n/// and [`enter`](#common.SyntaxNode.enter).\noverlay, /// The parser used to create this subtree.\nparser) {\n  _classCallCheck(this, MountedTree);\n\n  this.tree = tree;\n  this.overlay = overlay;\n  this.parser = parser;\n};\n\nvar noProps = Object.create(null); /// Each node in a syntax tree has a node type associated with it.\n\nvar NodeType = /*#__PURE__*/function () {\n  /// @internal\n  function NodeType( /// The name of the node type. Not necessarily unique, but if the\n  /// grammar was written properly, different node types with the\n  /// same name within a node set should play the same semantic\n  /// role.\n  name, /// @internal\n  props, /// The id of this node in its set. Corresponds to the term ids\n  /// used in the parser.\n  id) {\n    var flags = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n    _classCallCheck(this, NodeType);\n\n    this.name = name;\n    this.props = props;\n    this.id = id;\n    this.flags = flags;\n  } /// Define a node type.\n\n\n  _createClass(NodeType, [{\n    key: \"prop\",\n    /// Retrieves a node prop for this type. Will return `undefined` if\n    /// the prop isn't present on this node.\n    value: function prop(_prop) {\n      return this.props[_prop.id];\n    } /// True when this is the top node of a grammar.\n\n  }, {\n    key: \"is\",\n    /// Returns true when this node's name or one of its\n    /// [groups](#common.NodeProp^group) matches the given string.\n    value: function is(name) {\n      if (typeof name == 'string') {\n        if (this.name == name) return true;\n        var group = this.prop(NodeProp.group);\n        return group ? group.indexOf(name) > -1 : false;\n      }\n\n      return this.id == name;\n    } /// Create a function from node types to arbitrary values by\n    /// specifying an object whose property names are node or\n    /// [group](#common.NodeProp^group) names. Often useful with\n    /// [`NodeProp.add`](#common.NodeProp.add). You can put multiple\n    /// names, separated by spaces, in a single property name to map\n    /// multiple node names to a single value.\n\n  }, {\n    key: \"isTop\",\n    get: function get() {\n      return (this.flags & 1\n      /* Top */\n      ) > 0;\n    } /// True when this node is produced by a skip rule.\n\n  }, {\n    key: \"isSkipped\",\n    get: function get() {\n      return (this.flags & 2\n      /* Skipped */\n      ) > 0;\n    } /// Indicates whether this is an error node.\n\n  }, {\n    key: \"isError\",\n    get: function get() {\n      return (this.flags & 4\n      /* Error */\n      ) > 0;\n    } /// When true, this node type doesn't correspond to a user-declared\n    /// named node, for example because it is used to cache repetition.\n\n  }, {\n    key: \"isAnonymous\",\n    get: function get() {\n      return (this.flags & 8\n      /* Anonymous */\n      ) > 0;\n    }\n  }], [{\n    key: \"define\",\n    value: function define(spec) {\n      var props = spec.props && spec.props.length ? Object.create(null) : noProps;\n      var flags = (spec.top ? 1\n      /* Top */\n      : 0) | (spec.skipped ? 2\n      /* Skipped */\n      : 0) | (spec.error ? 4\n      /* Error */\n      : 0) | (spec.name == null ? 8\n      /* Anonymous */\n      : 0);\n      var type = new NodeType(spec.name || \"\", props, spec.id, flags);\n\n      if (spec.props) {\n        var _iterator = _createForOfIteratorHelper(spec.props),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var src = _step.value;\n            if (!Array.isArray(src)) src = src(type);\n\n            if (src) {\n              if (src[0].perNode) throw new RangeError(\"Can't store a per-node prop on a node type\");\n              props[src[0].id] = src[1];\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n\n      return type;\n    }\n  }, {\n    key: \"match\",\n    value: function match(map) {\n      var direct = Object.create(null);\n\n      for (var prop in map) {\n        var _iterator2 = _createForOfIteratorHelper(prop.split(\" \")),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var name = _step2.value;\n            direct[name] = map[prop];\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n\n      return function (node) {\n        for (var groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {\n          var found = direct[i < 0 ? node.name : groups[i]];\n          if (found) return found;\n        }\n      };\n    }\n  }]);\n\n  return NodeType;\n}(); /// An empty dummy node type to use when no actual type is available.\n\n\nNodeType.none = new NodeType(\"\", Object.create(null), 0, 8\n/* Anonymous */\n); /// A node set holds a collection of node types. It is used to\n/// compactly represent trees by storing their type ids, rather than a\n/// full pointer to the type object, in a numeric array. Each parser\n/// [has](#lr.LRParser.nodeSet) a node set, and [tree\n/// buffers](#common.TreeBuffer) can only store collections of nodes\n/// from the same set. A set can have a maximum of 2**16 (65536) node\n/// types in it, so that the ids fit into 16-bit typed array slots.\n\nvar NodeSet = /*#__PURE__*/function () {\n  /// Create a set with the given types. The `id` property of each\n  /// type should correspond to its position within the array.\n  function NodeSet( /// The node types in this set, by id.\n  types) {\n    _classCallCheck(this, NodeSet);\n\n    this.types = types;\n\n    for (var i = 0; i < types.length; i++) {\n      if (types[i].id != i) throw new RangeError(\"Node type ids should correspond to array positions when creating a node set\");\n    }\n  } /// Create a copy of this set with some node properties added. The\n  /// arguments to this method can be created with\n  /// [`NodeProp.add`](#common.NodeProp.add).\n\n\n  _createClass(NodeSet, [{\n    key: \"extend\",\n    value: function extend() {\n      var newTypes = [];\n\n      for (var _len = arguments.length, props = new Array(_len), _key = 0; _key < _len; _key++) {\n        props[_key] = arguments[_key];\n      }\n\n      var _iterator3 = _createForOfIteratorHelper(this.types),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var type = _step3.value;\n          var newProps = null;\n\n          var _iterator4 = _createForOfIteratorHelper(props),\n              _step4;\n\n          try {\n            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n              var source = _step4.value;\n              var add = source(type);\n\n              if (add) {\n                if (!newProps) newProps = Object.assign({}, type.props);\n                newProps[add[0].id] = add[1];\n              }\n            }\n          } catch (err) {\n            _iterator4.e(err);\n          } finally {\n            _iterator4.f();\n          }\n\n          newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      return new NodeSet(newTypes);\n    }\n  }]);\n\n  return NodeSet;\n}();\n\nvar CachedNode = new WeakMap(),\n    CachedInnerNode = new WeakMap(); /// Options that control iteration. Can be combined with the `|`\n/// operator to enable multiple ones.\n\nvar IterMode;\n\n(function (IterMode) {\n  /// When enabled, iteration will only visit [`Tree`](#common.Tree)\n  /// objects, not nodes packed into\n  /// [`TreeBuffer`](#common.TreeBuffer)s.\n  IterMode[IterMode[\"ExcludeBuffers\"] = 1] = \"ExcludeBuffers\"; /// Enable this to make iteration include anonymous nodes (such as\n  /// the nodes that wrap repeated grammar constructs into a balanced\n  /// tree).\n\n  IterMode[IterMode[\"IncludeAnonymous\"] = 2] = \"IncludeAnonymous\"; /// By default, regular [mounted](#common.NodeProp^mounted) nodes\n  /// replace their base node in iteration. Enable this to ignore them\n  /// instead.\n\n  IterMode[IterMode[\"IgnoreMounts\"] = 4] = \"IgnoreMounts\"; /// This option only applies in\n  /// [`enter`](#common.SyntaxNode.enter)-style methods. It tells the\n  /// library to not enter mounted overlays if one covers the given\n  /// position.\n\n  IterMode[IterMode[\"IgnoreOverlays\"] = 8] = \"IgnoreOverlays\";\n})(IterMode || (IterMode = {})); /// A piece of syntax tree. There are two ways to approach these\n/// trees: the way they are actually stored in memory, and the\n/// convenient way.\n///\n/// Syntax trees are stored as a tree of `Tree` and `TreeBuffer`\n/// objects. By packing detail information into `TreeBuffer` leaf\n/// nodes, the representation is made a lot more memory-efficient.\n///\n/// However, when you want to actually work with tree nodes, this\n/// representation is very awkward, so most client code will want to\n/// use the [`TreeCursor`](#common.TreeCursor) or\n/// [`SyntaxNode`](#common.SyntaxNode) interface instead, which provides\n/// a view on some part of this data structure, and can be used to\n/// move around to adjacent nodes.\n\n\nvar Tree = /*#__PURE__*/function () {\n  /// Construct a new tree. See also [`Tree.build`](#common.Tree^build).\n  function Tree( /// The type of the top node.\n  type, /// This node's child nodes.\n  children, /// The positions (offsets relative to the start of this tree) of\n  /// the children.\n  positions, /// The total length of this tree\n  length, /// Per-node [node props](#common.NodeProp) to associate with this node.\n  props) {\n    _classCallCheck(this, Tree);\n\n    this.type = type;\n    this.children = children;\n    this.positions = positions;\n    this.length = length; /// @internal\n\n    this.props = null;\n\n    if (props && props.length) {\n      this.props = Object.create(null);\n\n      var _iterator5 = _createForOfIteratorHelper(props),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var _step5$value = _slicedToArray(_step5.value, 2),\n              prop = _step5$value[0],\n              value = _step5$value[1];\n\n          this.props[typeof prop == \"number\" ? prop : prop.id] = value;\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    }\n  } /// @internal\n\n\n  _createClass(Tree, [{\n    key: \"toString\",\n    value: function toString() {\n      var mounted = this.prop(NodeProp.mounted);\n      if (mounted && !mounted.overlay) return mounted.tree.toString();\n      var children = \"\";\n\n      var _iterator6 = _createForOfIteratorHelper(this.children),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var ch = _step6.value;\n          var str = ch.toString();\n\n          if (str) {\n            if (children) children += \",\";\n            children += str;\n          }\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      return !this.type.name ? children : (/\\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) + (children.length ? \"(\" + children + \")\" : \"\");\n    } /// Get a [tree cursor](#common.TreeCursor) positioned at the top of\n    /// the tree. Mode can be used to [control](#common.IterMode) which\n    /// nodes the cursor visits.\n\n  }, {\n    key: \"cursor\",\n    value: function cursor() {\n      var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      return new TreeCursor(this.topNode, mode);\n    } /// Get a [tree cursor](#common.TreeCursor) pointing into this tree\n    /// at the given position and side (see\n    /// [`moveTo`](#common.TreeCursor.moveTo).\n\n  }, {\n    key: \"cursorAt\",\n    value: function cursorAt(pos) {\n      var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var scope = CachedNode.get(this) || this.topNode;\n      var cursor = new TreeCursor(scope);\n      cursor.moveTo(pos, side);\n      CachedNode.set(this, cursor._tree);\n      return cursor;\n    } /// Get a [syntax node](#common.SyntaxNode) object for the top of the\n    /// tree.\n\n  }, {\n    key: \"resolve\",\n    /// Get the [syntax node](#common.SyntaxNode) at the given position.\n    /// If `side` is -1, this will move into nodes that end at the\n    /// position. If 1, it'll move into nodes that start at the\n    /// position. With 0, it'll only enter nodes that cover the position\n    /// from both sides.\n    value: function resolve(pos) {\n      var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var node = resolveNode(CachedNode.get(this) || this.topNode, pos, side, false);\n      CachedNode.set(this, node);\n      return node;\n    } /// Like [`resolve`](#common.Tree.resolve), but will enter\n    /// [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node\n    /// pointing into the innermost overlaid tree at the given position\n    /// (with parent links going through all parent structure, including\n    /// the host trees).\n\n  }, {\n    key: \"resolveInner\",\n    value: function resolveInner(pos) {\n      var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var node = resolveNode(CachedInnerNode.get(this) || this.topNode, pos, side, true);\n      CachedInnerNode.set(this, node);\n      return node;\n    } /// Iterate over the tree and its children, calling `enter` for any\n    /// node that touches the `from`/`to` region (if given) before\n    /// running over such a node's children, and `leave` (if given) when\n    /// leaving the node. When `enter` returns `false`, that node will\n    /// not have its children iterated over (or `leave` called).\n\n  }, {\n    key: \"iterate\",\n    value: function iterate(spec) {\n      var enter = spec.enter,\n          leave = spec.leave,\n          _spec$from = spec.from,\n          from = _spec$from === void 0 ? 0 : _spec$from,\n          _spec$to = spec.to,\n          to = _spec$to === void 0 ? this.length : _spec$to;\n\n      for (var c = this.cursor((spec.mode || 0) | IterMode.IncludeAnonymous);;) {\n        var entered = false;\n\n        if (c.from <= to && c.to >= from && (c.type.isAnonymous || enter(c) !== false)) {\n          if (c.firstChild()) continue;\n          entered = true;\n        }\n\n        for (;;) {\n          if (entered && leave && !c.type.isAnonymous) leave(c);\n          if (c.nextSibling()) break;\n          if (!c.parent()) return;\n          entered = true;\n        }\n      }\n    } /// Get the value of the given [node prop](#common.NodeProp) for this\n    /// node. Works with both per-node and per-type props.\n\n  }, {\n    key: \"prop\",\n    value: function prop(_prop2) {\n      return !_prop2.perNode ? this.type.prop(_prop2) : this.props ? this.props[_prop2.id] : undefined;\n    } /// Returns the node's [per-node props](#common.NodeProp.perNode) in a\n    /// format that can be passed to the [`Tree`](#common.Tree)\n    /// constructor.\n\n  }, {\n    key: \"balance\",\n    /// Balance the direct children of this tree, producing a copy of\n    /// which may have children grouped into subtrees with type\n    /// [`NodeType.none`](#common.NodeType^none).\n    value: function balance() {\n      var _this2 = this;\n\n      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.children.length <= 8\n      /* BranchFactor */\n      ? this : balanceRange(NodeType.none, this.children, this.positions, 0, this.children.length, 0, this.length, function (children, positions, length) {\n        return new Tree(_this2.type, children, positions, length, _this2.propValues);\n      }, config.makeTree || function (children, positions, length) {\n        return new Tree(NodeType.none, children, positions, length);\n      });\n    } /// Build a tree from a postfix-ordered buffer of node information,\n    /// or a cursor over such a buffer.\n\n  }, {\n    key: \"topNode\",\n    get: function get() {\n      return new TreeNode(this, 0, 0, null);\n    }\n  }, {\n    key: \"propValues\",\n    get: function get() {\n      var result = [];\n      if (this.props) for (var id in this.props) {\n        result.push([+id, this.props[id]]);\n      }\n      return result;\n    }\n  }], [{\n    key: \"build\",\n    value: function build(data) {\n      return buildTree(data);\n    }\n  }]);\n\n  return Tree;\n}(); /// The empty tree\n\n\nTree.empty = new Tree(NodeType.none, [], [], 0);\n\nvar FlatBufferCursor = /*#__PURE__*/function () {\n  function FlatBufferCursor(buffer, index) {\n    _classCallCheck(this, FlatBufferCursor);\n\n    this.buffer = buffer;\n    this.index = index;\n  }\n\n  _createClass(FlatBufferCursor, [{\n    key: \"next\",\n    value: function next() {\n      this.index -= 4;\n    }\n  }, {\n    key: \"fork\",\n    value: function fork() {\n      return new FlatBufferCursor(this.buffer, this.index);\n    }\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this.buffer[this.index - 4];\n    }\n  }, {\n    key: \"start\",\n    get: function get() {\n      return this.buffer[this.index - 3];\n    }\n  }, {\n    key: \"end\",\n    get: function get() {\n      return this.buffer[this.index - 2];\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this.buffer[this.index - 1];\n    }\n  }, {\n    key: \"pos\",\n    get: function get() {\n      return this.index;\n    }\n  }]);\n\n  return FlatBufferCursor;\n}(); /// Tree buffers contain (type, start, end, endIndex) quads for each\n/// node. In such a buffer, nodes are stored in prefix order (parents\n/// before children, with the endIndex of the parent indicating which\n/// children belong to it).\n\n\nvar TreeBuffer = /*#__PURE__*/function () {\n  /// Create a tree buffer.\n  function TreeBuffer( /// The buffer's content.\n  buffer, /// The total length of the group of nodes in the buffer.\n  length, /// The node set used in this buffer.\n  set) {\n    _classCallCheck(this, TreeBuffer);\n\n    this.buffer = buffer;\n    this.length = length;\n    this.set = set;\n  } /// @internal\n\n\n  _createClass(TreeBuffer, [{\n    key: \"toString\",\n    /// @internal\n    value: function toString() {\n      var result = [];\n\n      for (var index = 0; index < this.buffer.length;) {\n        result.push(this.childString(index));\n        index = this.buffer[index + 3];\n      }\n\n      return result.join(\",\");\n    } /// @internal\n\n  }, {\n    key: \"childString\",\n    value: function childString(index) {\n      var id = this.buffer[index],\n          endIndex = this.buffer[index + 3];\n      var type = this.set.types[id],\n          result = type.name;\n      if (/\\W/.test(result) && !type.isError) result = JSON.stringify(result);\n      index += 4;\n      if (endIndex == index) return result;\n      var children = [];\n\n      while (index < endIndex) {\n        children.push(this.childString(index));\n        index = this.buffer[index + 3];\n      }\n\n      return result + \"(\" + children.join(\",\") + \")\";\n    } /// @internal\n\n  }, {\n    key: \"findChild\",\n    value: function findChild(startIndex, endIndex, dir, pos, side) {\n      var buffer = this.buffer,\n          pick = -1;\n\n      for (var i = startIndex; i != endIndex; i = buffer[i + 3]) {\n        if (checkSide(side, pos, buffer[i + 1], buffer[i + 2])) {\n          pick = i;\n          if (dir > 0) break;\n        }\n      }\n\n      return pick;\n    } /// @internal\n\n  }, {\n    key: \"slice\",\n    value: function slice(startI, endI, from, to) {\n      var b = this.buffer;\n      var copy = new Uint16Array(endI - startI);\n\n      for (var i = startI, j = 0; i < endI;) {\n        copy[j++] = b[i++];\n        copy[j++] = b[i++] - from;\n        copy[j++] = b[i++] - from;\n        copy[j++] = b[i++] - startI;\n      }\n\n      return new TreeBuffer(copy, to - from, this.set);\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return NodeType.none;\n    }\n  }]);\n\n  return TreeBuffer;\n}();\n\nfunction checkSide(side, pos, from, to) {\n  switch (side) {\n    case -2\n    /* Before */\n    :\n      return from < pos;\n\n    case -1\n    /* AtOrBefore */\n    :\n      return to >= pos && from < pos;\n\n    case 0\n    /* Around */\n    :\n      return from < pos && to > pos;\n\n    case 1\n    /* AtOrAfter */\n    :\n      return from <= pos && to > pos;\n\n    case 2\n    /* After */\n    :\n      return to > pos;\n\n    case 4\n    /* DontCare */\n    :\n      return true;\n  }\n}\n\nfunction _enterUnfinishedNodesBefore(node, pos) {\n  var scan = node.childBefore(pos);\n\n  while (scan) {\n    var last = scan.lastChild;\n    if (!last || last.to != scan.to) break;\n\n    if (last.type.isError && last.from == last.to) {\n      node = scan;\n      scan = last.prevSibling;\n    } else {\n      scan = last;\n    }\n  }\n\n  return node;\n}\n\nfunction resolveNode(node, pos, side, overlays) {\n  var _a; // Move up to a node that actually holds the position, if possible\n\n\n  while (node.from == node.to || (side < 1 ? node.from >= pos : node.from > pos) || (side > -1 ? node.to <= pos : node.to < pos)) {\n    var parent = !overlays && node instanceof TreeNode && node.index < 0 ? null : node.parent;\n    if (!parent) return node;\n    node = parent;\n  }\n\n  var mode = overlays ? 0 : IterMode.IgnoreOverlays; // Must go up out of overlays when those do not overlap with pos\n\n  if (overlays) for (var scan = node, _parent2 = scan.parent; _parent2; scan = _parent2, _parent2 = scan.parent) {\n    if (scan instanceof TreeNode && scan.index < 0 && ((_a = _parent2.enter(pos, side, mode)) === null || _a === void 0 ? void 0 : _a.from) != scan.from) node = _parent2;\n  }\n\n  for (;;) {\n    var inner = node.enter(pos, side, mode);\n    if (!inner) return node;\n    node = inner;\n  }\n}\n\nvar TreeNode = /*#__PURE__*/function () {\n  function TreeNode(_tree, from, // Index in parent node, set to -1 if the node is not a direct child of _parent.node (overlay)\n  index, _parent) {\n    _classCallCheck(this, TreeNode);\n\n    this._tree = _tree;\n    this.from = from;\n    this.index = index;\n    this._parent = _parent;\n  }\n\n  _createClass(TreeNode, [{\n    key: \"nextChild\",\n    value: function nextChild(i, dir, pos, side) {\n      var mode = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n\n      for (var parent = this;;) {\n        for (var _parent$_tree = parent._tree, children = _parent$_tree.children, positions = _parent$_tree.positions, e = dir > 0 ? children.length : -1; i != e; i += dir) {\n          var next = children[i],\n              start = positions[i] + parent.from;\n          if (!checkSide(side, pos, start, start + next.length)) continue;\n\n          if (next instanceof TreeBuffer) {\n            if (mode & IterMode.ExcludeBuffers) continue;\n            var index = next.findChild(0, next.buffer.length, dir, pos - start, side);\n            if (index > -1) return new BufferNode(new BufferContext(parent, next, i, start), null, index);\n          } else if (mode & IterMode.IncludeAnonymous || !next.type.isAnonymous || hasChild(next)) {\n            var mounted = void 0;\n            if (!(mode & IterMode.IgnoreMounts) && next.props && (mounted = next.prop(NodeProp.mounted)) && !mounted.overlay) return new TreeNode(mounted.tree, start, i, parent);\n            var inner = new TreeNode(next, start, i, parent);\n            return mode & IterMode.IncludeAnonymous || !inner.type.isAnonymous ? inner : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, pos, side);\n          }\n        }\n\n        if (mode & IterMode.IncludeAnonymous || !parent.type.isAnonymous) return null;\n        if (parent.index >= 0) i = parent.index + dir;else i = dir < 0 ? -1 : parent._parent._tree.children.length;\n        parent = parent._parent;\n        if (!parent) return null;\n      }\n    }\n  }, {\n    key: \"childAfter\",\n    value: function childAfter(pos) {\n      return this.nextChild(0, 1, pos, 2\n      /* After */\n      );\n    }\n  }, {\n    key: \"childBefore\",\n    value: function childBefore(pos) {\n      return this.nextChild(this._tree.children.length - 1, -1, pos, -2\n      /* Before */\n      );\n    }\n  }, {\n    key: \"enter\",\n    value: function enter(pos, side) {\n      var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var mounted;\n\n      if (!(mode & IterMode.IgnoreOverlays) && (mounted = this._tree.prop(NodeProp.mounted)) && mounted.overlay) {\n        var rPos = pos - this.from;\n\n        var _iterator7 = _createForOfIteratorHelper(mounted.overlay),\n            _step7;\n\n        try {\n          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n            var _step7$value = _step7.value,\n                from = _step7$value.from,\n                to = _step7$value.to;\n            if ((side > 0 ? from <= rPos : from < rPos) && (side < 0 ? to >= rPos : to > rPos)) return new TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);\n          }\n        } catch (err) {\n          _iterator7.e(err);\n        } finally {\n          _iterator7.f();\n        }\n      }\n\n      return this.nextChild(0, 1, pos, side, mode);\n    }\n  }, {\n    key: \"nextSignificantParent\",\n    value: function nextSignificantParent() {\n      var val = this;\n\n      while (val.type.isAnonymous && val._parent) {\n        val = val._parent;\n      }\n\n      return val;\n    }\n  }, {\n    key: \"cursor\",\n    value: function cursor() {\n      var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      return new TreeCursor(this, mode);\n    }\n  }, {\n    key: \"toTree\",\n    value: function toTree() {\n      return this._tree;\n    }\n  }, {\n    key: \"resolve\",\n    value: function resolve(pos) {\n      var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      return resolveNode(this, pos, side, false);\n    }\n  }, {\n    key: \"resolveInner\",\n    value: function resolveInner(pos) {\n      var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      return resolveNode(this, pos, side, true);\n    }\n  }, {\n    key: \"enterUnfinishedNodesBefore\",\n    value: function enterUnfinishedNodesBefore(pos) {\n      return _enterUnfinishedNodesBefore(this, pos);\n    }\n  }, {\n    key: \"getChild\",\n    value: function getChild(type) {\n      var before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var after = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n      var r = _getChildren(this, type, before, after);\n\n      return r.length ? r[0] : null;\n    }\n  }, {\n    key: \"getChildren\",\n    value: function getChildren(type) {\n      var before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var after = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      return _getChildren(this, type, before, after);\n    } /// @internal\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this._tree.toString();\n    }\n  }, {\n    key: \"matchContext\",\n    value: function matchContext(context) {\n      return matchNodeContext(this, context);\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this._tree.type;\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this._tree.type.name;\n    }\n  }, {\n    key: \"to\",\n    get: function get() {\n      return this.from + this._tree.length;\n    }\n  }, {\n    key: \"firstChild\",\n    get: function get() {\n      return this.nextChild(0, 1, 0, 4\n      /* DontCare */\n      );\n    }\n  }, {\n    key: \"lastChild\",\n    get: function get() {\n      return this.nextChild(this._tree.children.length - 1, -1, 0, 4\n      /* DontCare */\n      );\n    }\n  }, {\n    key: \"parent\",\n    get: function get() {\n      return this._parent ? this._parent.nextSignificantParent() : null;\n    }\n  }, {\n    key: \"nextSibling\",\n    get: function get() {\n      return this._parent && this.index >= 0 ? this._parent.nextChild(this.index + 1, 1, 0, 4\n      /* DontCare */\n      ) : null;\n    }\n  }, {\n    key: \"prevSibling\",\n    get: function get() {\n      return this._parent && this.index >= 0 ? this._parent.nextChild(this.index - 1, -1, 0, 4\n      /* DontCare */\n      ) : null;\n    }\n  }, {\n    key: \"tree\",\n    get: function get() {\n      return this._tree;\n    }\n  }, {\n    key: \"node\",\n    get: function get() {\n      return this;\n    }\n  }]);\n\n  return TreeNode;\n}();\n\nfunction _getChildren(node, type, before, after) {\n  var cur = node.cursor(),\n      result = [];\n  if (!cur.firstChild()) return result;\n  if (before != null) while (!cur.type.is(before)) {\n    if (!cur.nextSibling()) return result;\n  }\n\n  for (;;) {\n    if (after != null && cur.type.is(after)) return result;\n    if (cur.type.is(type)) result.push(cur.node);\n    if (!cur.nextSibling()) return after == null ? result : [];\n  }\n}\n\nfunction matchNodeContext(node, context) {\n  var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : context.length - 1;\n\n  for (var p = node.parent; i >= 0; p = p.parent) {\n    if (!p) return false;\n\n    if (!p.type.isAnonymous) {\n      if (context[i] && context[i] != p.name) return false;\n      i--;\n    }\n  }\n\n  return true;\n}\n\nvar BufferContext = function BufferContext(parent, buffer, index, start) {\n  _classCallCheck(this, BufferContext);\n\n  this.parent = parent;\n  this.buffer = buffer;\n  this.index = index;\n  this.start = start;\n};\n\nvar BufferNode = /*#__PURE__*/function () {\n  function BufferNode(context, _parent, index) {\n    _classCallCheck(this, BufferNode);\n\n    this.context = context;\n    this._parent = _parent;\n    this.index = index;\n    this.type = context.buffer.set.types[context.buffer.buffer[index]];\n  }\n\n  _createClass(BufferNode, [{\n    key: \"child\",\n    value: function child(dir, pos, side) {\n      var buffer = this.context.buffer;\n      var index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.context.start, side);\n      return index < 0 ? null : new BufferNode(this.context, this, index);\n    }\n  }, {\n    key: \"childAfter\",\n    value: function childAfter(pos) {\n      return this.child(1, pos, 2\n      /* After */\n      );\n    }\n  }, {\n    key: \"childBefore\",\n    value: function childBefore(pos) {\n      return this.child(-1, pos, -2\n      /* Before */\n      );\n    }\n  }, {\n    key: \"enter\",\n    value: function enter(pos, side) {\n      var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      if (mode & IterMode.ExcludeBuffers) return null;\n      var buffer = this.context.buffer;\n      var index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);\n      return index < 0 ? null : new BufferNode(this.context, this, index);\n    }\n  }, {\n    key: \"externalSibling\",\n    value: function externalSibling(dir) {\n      return this._parent ? null : this.context.parent.nextChild(this.context.index + dir, dir, 0, 4\n      /* DontCare */\n      );\n    }\n  }, {\n    key: \"cursor\",\n    value: function cursor() {\n      var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      return new TreeCursor(this, mode);\n    }\n  }, {\n    key: \"toTree\",\n    value: function toTree() {\n      var children = [],\n          positions = [];\n      var buffer = this.context.buffer;\n      var startI = this.index + 4,\n          endI = buffer.buffer[this.index + 3];\n\n      if (endI > startI) {\n        var from = buffer.buffer[this.index + 1],\n            to = buffer.buffer[this.index + 2];\n        children.push(buffer.slice(startI, endI, from, to));\n        positions.push(0);\n      }\n\n      return new Tree(this.type, children, positions, this.to - this.from);\n    }\n  }, {\n    key: \"resolve\",\n    value: function resolve(pos) {\n      var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      return resolveNode(this, pos, side, false);\n    }\n  }, {\n    key: \"resolveInner\",\n    value: function resolveInner(pos) {\n      var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      return resolveNode(this, pos, side, true);\n    }\n  }, {\n    key: \"enterUnfinishedNodesBefore\",\n    value: function enterUnfinishedNodesBefore(pos) {\n      return _enterUnfinishedNodesBefore(this, pos);\n    } /// @internal\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.context.buffer.childString(this.index);\n    }\n  }, {\n    key: \"getChild\",\n    value: function getChild(type) {\n      var before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var after = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n      var r = _getChildren(this, type, before, after);\n\n      return r.length ? r[0] : null;\n    }\n  }, {\n    key: \"getChildren\",\n    value: function getChildren(type) {\n      var before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var after = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      return _getChildren(this, type, before, after);\n    }\n  }, {\n    key: \"matchContext\",\n    value: function matchContext(context) {\n      return matchNodeContext(this, context);\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this.type.name;\n    }\n  }, {\n    key: \"from\",\n    get: function get() {\n      return this.context.start + this.context.buffer.buffer[this.index + 1];\n    }\n  }, {\n    key: \"to\",\n    get: function get() {\n      return this.context.start + this.context.buffer.buffer[this.index + 2];\n    }\n  }, {\n    key: \"firstChild\",\n    get: function get() {\n      return this.child(1, 0, 4\n      /* DontCare */\n      );\n    }\n  }, {\n    key: \"lastChild\",\n    get: function get() {\n      return this.child(-1, 0, 4\n      /* DontCare */\n      );\n    }\n  }, {\n    key: \"parent\",\n    get: function get() {\n      return this._parent || this.context.parent.nextSignificantParent();\n    }\n  }, {\n    key: \"nextSibling\",\n    get: function get() {\n      var buffer = this.context.buffer;\n      var after = buffer.buffer[this.index + 3];\n      if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length)) return new BufferNode(this.context, this._parent, after);\n      return this.externalSibling(1);\n    }\n  }, {\n    key: \"prevSibling\",\n    get: function get() {\n      var buffer = this.context.buffer;\n      var parentStart = this._parent ? this._parent.index + 4 : 0;\n      if (this.index == parentStart) return this.externalSibling(-1);\n      return new BufferNode(this.context, this._parent, buffer.findChild(parentStart, this.index, -1, 0, 4\n      /* DontCare */\n      ));\n    }\n  }, {\n    key: \"tree\",\n    get: function get() {\n      return null;\n    }\n  }, {\n    key: \"node\",\n    get: function get() {\n      return this;\n    }\n  }]);\n\n  return BufferNode;\n}(); /// A tree cursor object focuses on a given node in a syntax tree, and\n/// allows you to move to adjacent nodes.\n\n\nvar TreeCursor = /*#__PURE__*/function () {\n  /// @internal\n  function TreeCursor(node) {\n    var mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n    _classCallCheck(this, TreeCursor);\n\n    this.mode = mode; /// @internal\n\n    this.buffer = null;\n    this.stack = []; /// @internal\n\n    this.index = 0;\n    this.bufferNode = null;\n\n    if (node instanceof TreeNode) {\n      this.yieldNode(node);\n    } else {\n      this._tree = node.context.parent;\n      this.buffer = node.context;\n\n      for (var n = node._parent; n; n = n._parent) {\n        this.stack.unshift(n.index);\n      }\n\n      this.bufferNode = node;\n      this.yieldBuf(node.index);\n    }\n  } /// Shorthand for `.type.name`.\n\n\n  _createClass(TreeCursor, [{\n    key: \"yieldNode\",\n    value: function yieldNode(node) {\n      if (!node) return false;\n      this._tree = node;\n      this.type = node.type;\n      this.from = node.from;\n      this.to = node.to;\n      return true;\n    }\n  }, {\n    key: \"yieldBuf\",\n    value: function yieldBuf(index, type) {\n      this.index = index;\n      var _this$buffer = this.buffer,\n          start = _this$buffer.start,\n          buffer = _this$buffer.buffer;\n      this.type = type || buffer.set.types[buffer.buffer[index]];\n      this.from = start + buffer.buffer[index + 1];\n      this.to = start + buffer.buffer[index + 2];\n      return true;\n    }\n  }, {\n    key: \"yield\",\n    value: function _yield(node) {\n      if (!node) return false;\n\n      if (node instanceof TreeNode) {\n        this.buffer = null;\n        return this.yieldNode(node);\n      }\n\n      this.buffer = node.context;\n      return this.yieldBuf(node.index, node.type);\n    } /// @internal\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();\n    } /// @internal\n\n  }, {\n    key: \"enterChild\",\n    value: function enterChild(dir, pos, side) {\n      if (!this.buffer) return this.yield(this._tree.nextChild(dir < 0 ? this._tree._tree.children.length - 1 : 0, dir, pos, side, this.mode));\n      var buffer = this.buffer.buffer;\n      var index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.buffer.start, side);\n      if (index < 0) return false;\n      this.stack.push(this.index);\n      return this.yieldBuf(index);\n    } /// Move the cursor to this node's first child. When this returns\n    /// false, the node has no child, and the cursor has not been moved.\n\n  }, {\n    key: \"firstChild\",\n    value: function firstChild() {\n      return this.enterChild(1, 0, 4\n      /* DontCare */\n      );\n    } /// Move the cursor to this node's last child.\n\n  }, {\n    key: \"lastChild\",\n    value: function lastChild() {\n      return this.enterChild(-1, 0, 4\n      /* DontCare */\n      );\n    } /// Move the cursor to the first child that ends after `pos`.\n\n  }, {\n    key: \"childAfter\",\n    value: function childAfter(pos) {\n      return this.enterChild(1, pos, 2\n      /* After */\n      );\n    } /// Move to the last child that starts before `pos`.\n\n  }, {\n    key: \"childBefore\",\n    value: function childBefore(pos) {\n      return this.enterChild(-1, pos, -2\n      /* Before */\n      );\n    } /// Move the cursor to the child around `pos`. If side is -1 the\n    /// child may end at that position, when 1 it may start there. This\n    /// will also enter [overlaid](#common.MountedTree.overlay)\n    /// [mounted](#common.NodeProp^mounted) trees unless `overlays` is\n    /// set to false.\n\n  }, {\n    key: \"enter\",\n    value: function enter(pos, side) {\n      var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.mode;\n      if (!this.buffer) return this.yield(this._tree.enter(pos, side, mode));\n      return mode & IterMode.ExcludeBuffers ? false : this.enterChild(1, pos, side);\n    } /// Move to the node's parent node, if this isn't the top node.\n\n  }, {\n    key: \"parent\",\n    value: function parent() {\n      if (!this.buffer) return this.yieldNode(this.mode & IterMode.IncludeAnonymous ? this._tree._parent : this._tree.parent);\n      if (this.stack.length) return this.yieldBuf(this.stack.pop());\n      var parent = this.mode & IterMode.IncludeAnonymous ? this.buffer.parent : this.buffer.parent.nextSignificantParent();\n      this.buffer = null;\n      return this.yieldNode(parent);\n    } /// @internal\n\n  }, {\n    key: \"sibling\",\n    value: function sibling(dir) {\n      if (!this.buffer) return !this._tree._parent ? false : this.yield(this._tree.index < 0 ? null : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4\n      /* DontCare */\n      , this.mode));\n      var buffer = this.buffer.buffer,\n          d = this.stack.length - 1;\n\n      if (dir < 0) {\n        var parentStart = d < 0 ? 0 : this.stack[d] + 4;\n        if (this.index != parentStart) return this.yieldBuf(buffer.findChild(parentStart, this.index, -1, 0, 4\n        /* DontCare */\n        ));\n      } else {\n        var after = buffer.buffer[this.index + 3];\n        if (after < (d < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d] + 3])) return this.yieldBuf(after);\n      }\n\n      return d < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4\n      /* DontCare */\n      , this.mode)) : false;\n    } /// Move to this node's next sibling, if any.\n\n  }, {\n    key: \"nextSibling\",\n    value: function nextSibling() {\n      return this.sibling(1);\n    } /// Move to this node's previous sibling, if any.\n\n  }, {\n    key: \"prevSibling\",\n    value: function prevSibling() {\n      return this.sibling(-1);\n    }\n  }, {\n    key: \"atLastNode\",\n    value: function atLastNode(dir) {\n      var index,\n          parent,\n          buffer = this.buffer;\n\n      if (buffer) {\n        if (dir > 0) {\n          if (this.index < buffer.buffer.buffer.length) return false;\n        } else {\n          for (var i = 0; i < this.index; i++) {\n            if (buffer.buffer.buffer[i + 3] < this.index) return false;\n          }\n        }\n\n        index = buffer.index;\n        parent = buffer.parent;\n      } else {\n        var _this$_tree = this._tree;\n        index = _this$_tree.index;\n        parent = _this$_tree._parent;\n      }\n\n      for (; parent; _parent3 = parent, index = _parent3.index, parent = _parent3._parent, _parent3) {\n        var _parent3;\n\n        if (index > -1) for (var _i = index + dir, e = dir < 0 ? -1 : parent._tree.children.length; _i != e; _i += dir) {\n          var child = parent._tree.children[_i];\n          if (this.mode & IterMode.IncludeAnonymous || child instanceof TreeBuffer || !child.type.isAnonymous || hasChild(child)) return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"move\",\n    value: function move(dir, enter) {\n      if (enter && this.enterChild(dir, 0, 4\n      /* DontCare */\n      )) return true;\n\n      for (;;) {\n        if (this.sibling(dir)) return true;\n        if (this.atLastNode(dir) || !this.parent()) return false;\n      }\n    } /// Move to the next node in a\n    /// [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order_(NLR))\n    /// traversal, going from a node to its first child or, if the\n    /// current node is empty or `enter` is false, its next sibling or\n    /// the next sibling of the first parent node that has one.\n\n  }, {\n    key: \"next\",\n    value: function next() {\n      var enter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      return this.move(1, enter);\n    } /// Move to the next node in a last-to-first pre-order traveral. A\n    /// node is followed by its last child or, if it has none, its\n    /// previous sibling or the previous sibling of the first parent\n    /// node that has one.\n\n  }, {\n    key: \"prev\",\n    value: function prev() {\n      var enter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      return this.move(-1, enter);\n    } /// Move the cursor to the innermost node that covers `pos`. If\n    /// `side` is -1, it will enter nodes that end at `pos`. If it is 1,\n    /// it will enter nodes that start at `pos`.\n\n  }, {\n    key: \"moveTo\",\n    value: function moveTo(pos) {\n      var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      // Move up to a node that actually holds the position, if possible\n      while (this.from == this.to || (side < 1 ? this.from >= pos : this.from > pos) || (side > -1 ? this.to <= pos : this.to < pos)) {\n        if (!this.parent()) break;\n      } // Then scan down into child nodes as far as possible\n\n\n      while (this.enterChild(1, pos, side)) {}\n\n      return this;\n    } /// Get a [syntax node](#common.SyntaxNode) at the cursor's current\n    /// position.\n\n  }, {\n    key: \"iterate\",\n    /// Iterate over the current node and all its descendants, calling\n    /// `enter` when entering a node and `leave`, if given, when leaving\n    /// one. When `enter` returns `false`, any children of that node are\n    /// skipped, and `leave` isn't called for it.\n    value: function iterate(enter, leave) {\n      for (var depth = 0;;) {\n        var mustLeave = false;\n\n        if (this.type.isAnonymous || enter(this) !== false) {\n          if (this.firstChild()) {\n            depth++;\n            continue;\n          }\n\n          if (!this.type.isAnonymous) mustLeave = true;\n        }\n\n        for (;;) {\n          if (mustLeave && leave) leave(this);\n          mustLeave = this.type.isAnonymous;\n          if (this.nextSibling()) break;\n          if (!depth) return;\n          this.parent();\n          depth--;\n          mustLeave = true;\n        }\n      }\n    } /// Test whether the current node matches a given context—a sequence\n    /// of direct parent node names. Empty strings in the context array\n    /// are treated as wildcards.\n\n  }, {\n    key: \"matchContext\",\n    value: function matchContext(context) {\n      if (!this.buffer) return matchNodeContext(this.node, context);\n      var buffer = this.buffer.buffer,\n          types = buffer.set.types;\n\n      for (var i = context.length - 1, d = this.stack.length - 1; i >= 0; d--) {\n        if (d < 0) return matchNodeContext(this.node, context, i);\n        var type = types[buffer.buffer[this.stack[d]]];\n\n        if (!type.isAnonymous) {\n          if (context[i] && context[i] != type.name) return false;\n          i--;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this.type.name;\n    }\n  }, {\n    key: \"node\",\n    get: function get() {\n      if (!this.buffer) return this._tree;\n      var cache = this.bufferNode,\n          result = null,\n          depth = 0;\n\n      if (cache && cache.context == this.buffer) {\n        scan: for (var index = this.index, d = this.stack.length; d >= 0;) {\n          for (var c = cache; c; c = c._parent) {\n            if (c.index == index) {\n              if (index == this.index) return c;\n              result = c;\n              depth = d + 1;\n              break scan;\n            }\n          }\n\n          index = this.stack[--d];\n        }\n      }\n\n      for (var i = depth; i < this.stack.length; i++) {\n        result = new BufferNode(this.buffer, result, this.stack[i]);\n      }\n\n      return this.bufferNode = new BufferNode(this.buffer, result, this.index);\n    } /// Get the [tree](#common.Tree) that represents the current node, if\n    /// any. Will return null when the node is in a [tree\n    /// buffer](#common.TreeBuffer).\n\n  }, {\n    key: \"tree\",\n    get: function get() {\n      return this.buffer ? null : this._tree._tree;\n    }\n  }]);\n\n  return TreeCursor;\n}();\n\nfunction hasChild(tree) {\n  return tree.children.some(function (ch) {\n    return ch instanceof TreeBuffer || !ch.type.isAnonymous || hasChild(ch);\n  });\n}\n\nfunction buildTree(data) {\n  var _a;\n\n  var buffer = data.buffer,\n      nodeSet = data.nodeSet,\n      _data$maxBufferLength = data.maxBufferLength,\n      maxBufferLength = _data$maxBufferLength === void 0 ? DefaultBufferLength : _data$maxBufferLength,\n      _data$reused = data.reused,\n      reused = _data$reused === void 0 ? [] : _data$reused,\n      _data$minRepeatType = data.minRepeatType,\n      minRepeatType = _data$minRepeatType === void 0 ? nodeSet.types.length : _data$minRepeatType;\n  var cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;\n  var types = nodeSet.types;\n  var contextHash = 0,\n      lookAhead = 0;\n\n  function takeNode(parentStart, minPos, children, positions, inRepeat) {\n    var id = cursor.id,\n        start = cursor.start,\n        end = cursor.end,\n        size = cursor.size;\n    var lookAheadAtStart = lookAhead;\n\n    while (size < 0) {\n      cursor.next();\n\n      if (size == -1\n      /* Reuse */\n      ) {\n        var _node = reused[id];\n        children.push(_node);\n        positions.push(start - parentStart);\n        return;\n      } else if (size == -3\n      /* ContextChange */\n      ) {\n        // Context change\n        contextHash = id;\n        return;\n      } else if (size == -4\n      /* LookAhead */\n      ) {\n        lookAhead = id;\n        return;\n      } else {\n        throw new RangeError(\"Unrecognized record size: \".concat(size));\n      }\n    }\n\n    var type = types[id],\n        node,\n        buffer;\n    var startPos = start - parentStart;\n\n    if (end - start <= maxBufferLength && (buffer = findBufferSize(cursor.pos - minPos, inRepeat))) {\n      // Small enough for a buffer, and no reused nodes inside\n      var _data = new Uint16Array(buffer.size - buffer.skip);\n\n      var endPos = cursor.pos - buffer.size,\n          index = _data.length;\n\n      while (cursor.pos > endPos) {\n        index = copyToBuffer(buffer.start, _data, index);\n      }\n\n      node = new TreeBuffer(_data, end - buffer.start, nodeSet);\n      startPos = buffer.start - parentStart;\n    } else {\n      // Make it a node\n      var _endPos = cursor.pos - size;\n\n      cursor.next();\n      var localChildren = [],\n          localPositions = [];\n      var localInRepeat = id >= minRepeatType ? id : -1;\n      var lastGroup = 0,\n          lastEnd = end;\n\n      while (cursor.pos > _endPos) {\n        if (localInRepeat >= 0 && cursor.id == localInRepeat && cursor.size >= 0) {\n          if (cursor.end <= lastEnd - maxBufferLength) {\n            makeRepeatLeaf(localChildren, localPositions, start, lastGroup, cursor.end, lastEnd, localInRepeat, lookAheadAtStart);\n            lastGroup = localChildren.length;\n            lastEnd = cursor.end;\n          }\n\n          cursor.next();\n        } else {\n          takeNode(start, _endPos, localChildren, localPositions, localInRepeat);\n        }\n      }\n\n      if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length) makeRepeatLeaf(localChildren, localPositions, start, lastGroup, start, lastEnd, localInRepeat, lookAheadAtStart);\n      localChildren.reverse();\n      localPositions.reverse();\n\n      if (localInRepeat > -1 && lastGroup > 0) {\n        var make = makeBalanced(type);\n        node = balanceRange(type, localChildren, localPositions, 0, localChildren.length, 0, end - start, make, make);\n      } else {\n        node = makeTree(type, localChildren, localPositions, end - start, lookAheadAtStart - end);\n      }\n    }\n\n    children.push(node);\n    positions.push(startPos);\n  }\n\n  function makeBalanced(type) {\n    return function (children, positions, length) {\n      var lookAhead = 0,\n          lastI = children.length - 1,\n          last,\n          lookAheadProp;\n\n      if (lastI >= 0 && (last = children[lastI]) instanceof Tree) {\n        if (!lastI && last.type == type && last.length == length) return last;\n        if (lookAheadProp = last.prop(NodeProp.lookAhead)) lookAhead = positions[lastI] + last.length + lookAheadProp;\n      }\n\n      return makeTree(type, children, positions, length, lookAhead);\n    };\n  }\n\n  function makeRepeatLeaf(children, positions, base, i, from, to, type, lookAhead) {\n    var localChildren = [],\n        localPositions = [];\n\n    while (children.length > i) {\n      localChildren.push(children.pop());\n      localPositions.push(positions.pop() + base - from);\n    }\n\n    children.push(makeTree(nodeSet.types[type], localChildren, localPositions, to - from, lookAhead - to));\n    positions.push(from - base);\n  }\n\n  function makeTree(type, children, positions, length) {\n    var lookAhead = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n    var props = arguments.length > 5 ? arguments[5] : undefined;\n\n    if (contextHash) {\n      var pair = [NodeProp.contextHash, contextHash];\n      props = props ? [pair].concat(props) : [pair];\n    }\n\n    if (lookAhead > 25) {\n      var _pair = [NodeProp.lookAhead, lookAhead];\n      props = props ? [_pair].concat(props) : [_pair];\n    }\n\n    return new Tree(type, children, positions, length, props);\n  }\n\n  function findBufferSize(maxSize, inRepeat) {\n    // Scan through the buffer to find previous siblings that fit\n    // together in a TreeBuffer, and don't contain any reused nodes\n    // (which can't be stored in a buffer).\n    // If `inRepeat` is > -1, ignore node boundaries of that type for\n    // nesting, but make sure the end falls either at the start\n    // (`maxSize`) or before such a node.\n    var fork = cursor.fork();\n    var size = 0,\n        start = 0,\n        skip = 0,\n        minStart = fork.end - maxBufferLength;\n    var result = {\n      size: 0,\n      start: 0,\n      skip: 0\n    };\n\n    scan: for (var minPos = fork.pos - maxSize; fork.pos > minPos;) {\n      var _nodeSize = fork.size; // Pretend nested repeat nodes of the same type don't exist\n\n      if (fork.id == inRepeat && _nodeSize >= 0) {\n        // Except that we store the current state as a valid return\n        // value.\n        result.size = size;\n        result.start = start;\n        result.skip = skip;\n        skip += 4;\n        size += 4;\n        fork.next();\n        continue;\n      }\n\n      var startPos = fork.pos - _nodeSize;\n      if (_nodeSize < 0 || startPos < minPos || fork.start < minStart) break;\n      var localSkipped = fork.id >= minRepeatType ? 4 : 0;\n      var nodeStart = fork.start;\n      fork.next();\n\n      while (fork.pos > startPos) {\n        if (fork.size < 0) {\n          if (fork.size == -3\n          /* ContextChange */\n          ) localSkipped += 4;else break scan;\n        } else if (fork.id >= minRepeatType) {\n          localSkipped += 4;\n        }\n\n        fork.next();\n      }\n\n      start = nodeStart;\n      size += _nodeSize;\n      skip += localSkipped;\n    }\n\n    if (inRepeat < 0 || size == maxSize) {\n      result.size = size;\n      result.start = start;\n      result.skip = skip;\n    }\n\n    return result.size > 4 ? result : undefined;\n  }\n\n  function copyToBuffer(bufferStart, buffer, index) {\n    var id = cursor.id,\n        start = cursor.start,\n        end = cursor.end,\n        size = cursor.size;\n    cursor.next();\n\n    if (size >= 0 && id < minRepeatType) {\n      var startIndex = index;\n\n      if (size > 4) {\n        var endPos = cursor.pos - (size - 4);\n\n        while (cursor.pos > endPos) {\n          index = copyToBuffer(bufferStart, buffer, index);\n        }\n      }\n\n      buffer[--index] = startIndex;\n      buffer[--index] = end - bufferStart;\n      buffer[--index] = start - bufferStart;\n      buffer[--index] = id;\n    } else if (size == -3\n    /* ContextChange */\n    ) {\n      contextHash = id;\n    } else if (size == -4\n    /* LookAhead */\n    ) {\n      lookAhead = id;\n    }\n\n    return index;\n  }\n\n  var children = [],\n      positions = [];\n\n  while (cursor.pos > 0) {\n    takeNode(data.start || 0, data.bufferStart || 0, children, positions, -1);\n  }\n\n  var length = (_a = data.length) !== null && _a !== void 0 ? _a : children.length ? positions[0] + children[0].length : 0;\n  return new Tree(types[data.topID], children.reverse(), positions.reverse(), length);\n}\n\nvar nodeSizeCache = new WeakMap();\n\nfunction nodeSize(balanceType, node) {\n  if (!balanceType.isAnonymous || node instanceof TreeBuffer || node.type != balanceType) return 1;\n  var size = nodeSizeCache.get(node);\n\n  if (size == null) {\n    size = 1;\n\n    var _iterator8 = _createForOfIteratorHelper(node.children),\n        _step8;\n\n    try {\n      for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n        var child = _step8.value;\n\n        if (child.type != balanceType || !(child instanceof Tree)) {\n          size = 1;\n          break;\n        }\n\n        size += nodeSize(balanceType, child);\n      }\n    } catch (err) {\n      _iterator8.e(err);\n    } finally {\n      _iterator8.f();\n    }\n\n    nodeSizeCache.set(node, size);\n  }\n\n  return size;\n}\n\nfunction balanceRange( // The type the balanced tree's inner nodes.\nbalanceType, // The direct children and their positions\nchildren, positions, // The index range in children/positions to use\nfrom, to, // The start position of the nodes, relative to their parent.\nstart, // Length of the outer node\nlength, // Function to build the top node of the balanced tree\nmkTop, // Function to build internal nodes for the balanced tree\nmkTree) {\n  var total = 0;\n\n  for (var i = from; i < to; i++) {\n    total += nodeSize(balanceType, children[i]);\n  }\n\n  var maxChild = Math.ceil(total * 1.5 / 8\n  /* BranchFactor */\n  );\n  var localChildren = [],\n      localPositions = [];\n\n  function divide(children, positions, from, to, offset) {\n    for (var _i2 = from; _i2 < to;) {\n      var groupFrom = _i2,\n          groupStart = positions[_i2],\n          groupSize = nodeSize(balanceType, children[_i2]);\n      _i2++;\n\n      for (; _i2 < to; _i2++) {\n        var nextSize = nodeSize(balanceType, children[_i2]);\n        if (groupSize + nextSize >= maxChild) break;\n        groupSize += nextSize;\n      }\n\n      if (_i2 == groupFrom + 1) {\n        if (groupSize > maxChild) {\n          var only = children[groupFrom]; // Only trees can have a size > 1\n\n          divide(only.children, only.positions, 0, only.children.length, positions[groupFrom] + offset);\n          continue;\n        }\n\n        localChildren.push(children[groupFrom]);\n      } else {\n        var _length = positions[_i2 - 1] + children[_i2 - 1].length - groupStart;\n\n        localChildren.push(balanceRange(balanceType, children, positions, groupFrom, _i2, groupStart, _length, null, mkTree));\n      }\n\n      localPositions.push(groupStart + offset - start);\n    }\n  }\n\n  divide(children, positions, from, to, 0);\n  return (mkTop || mkTree)(localChildren, localPositions, length);\n} /// Provides a way to associate values with pieces of trees. As long\n/// as that part of the tree is reused, the associated values can be\n/// retrieved from an updated tree.\n\n\nvar NodeWeakMap = /*#__PURE__*/function () {\n  function NodeWeakMap() {\n    _classCallCheck(this, NodeWeakMap);\n\n    this.map = new WeakMap();\n  }\n\n  _createClass(NodeWeakMap, [{\n    key: \"setBuffer\",\n    value: function setBuffer(buffer, index, value) {\n      var inner = this.map.get(buffer);\n      if (!inner) this.map.set(buffer, inner = new Map());\n      inner.set(index, value);\n    }\n  }, {\n    key: \"getBuffer\",\n    value: function getBuffer(buffer, index) {\n      var inner = this.map.get(buffer);\n      return inner && inner.get(index);\n    } /// Set the value for this syntax node.\n\n  }, {\n    key: \"set\",\n    value: function set(node, value) {\n      if (node instanceof BufferNode) this.setBuffer(node.context.buffer, node.index, value);else if (node instanceof TreeNode) this.map.set(node.tree, value);\n    } /// Retrieve value for this syntax node, if it exists in the map.\n\n  }, {\n    key: \"get\",\n    value: function get(node) {\n      return node instanceof BufferNode ? this.getBuffer(node.context.buffer, node.index) : node instanceof TreeNode ? this.map.get(node.tree) : undefined;\n    } /// Set the value for the node that a cursor currently points to.\n\n  }, {\n    key: \"cursorSet\",\n    value: function cursorSet(cursor, value) {\n      if (cursor.buffer) this.setBuffer(cursor.buffer.buffer, cursor.index, value);else this.map.set(cursor.tree, value);\n    } /// Retrieve the value for the node that a cursor currently points\n    /// to.\n\n  }, {\n    key: \"cursorGet\",\n    value: function cursorGet(cursor) {\n      return cursor.buffer ? this.getBuffer(cursor.buffer.buffer, cursor.index) : this.map.get(cursor.tree);\n    }\n  }]);\n\n  return NodeWeakMap;\n}(); /// Tree fragments are used during [incremental\n/// parsing](#common.Parser.startParse) to track parts of old trees\n/// that can be reused in a new parse. An array of fragments is used\n/// to track regions of an old tree whose nodes might be reused in new\n/// parses. Use the static\n/// [`applyChanges`](#common.TreeFragment^applyChanges) method to\n/// update fragments for document changes.\n\n\nvar TreeFragment = /*#__PURE__*/function () {\n  /// Construct a tree fragment. You'll usually want to use\n  /// [`addTree`](#common.TreeFragment^addTree) and\n  /// [`applyChanges`](#common.TreeFragment^applyChanges) instead of\n  /// calling this directly.\n  function TreeFragment( /// The start of the unchanged range pointed to by this fragment.\n  /// This refers to an offset in the _updated_ document (as opposed\n  /// to the original tree).\n  from, /// The end of the unchanged range.\n  to, /// The tree that this fragment is based on.\n  tree, /// The offset between the fragment's tree and the document that\n  /// this fragment can be used against. Add this when going from\n  /// document to tree positions, subtract it to go from tree to\n  /// document positions.\n  offset) {\n    var openStart = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    var openEnd = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n\n    _classCallCheck(this, TreeFragment);\n\n    this.from = from;\n    this.to = to;\n    this.tree = tree;\n    this.offset = offset;\n    this.open = (openStart ? 1\n    /* Start */\n    : 0) | (openEnd ? 2\n    /* End */\n    : 0);\n  } /// Whether the start of the fragment represents the start of a\n  /// parse, or the end of a change. (In the second case, it may not\n  /// be safe to reuse some nodes at the start, depending on the\n  /// parsing algorithm.)\n\n\n  _createClass(TreeFragment, [{\n    key: \"openStart\",\n    get: function get() {\n      return (this.open & 1\n      /* Start */\n      ) > 0;\n    } /// Whether the end of the fragment represents the end of a\n    /// full-document parse, or the start of a change.\n\n  }, {\n    key: \"openEnd\",\n    get: function get() {\n      return (this.open & 2\n      /* End */\n      ) > 0;\n    } /// Create a set of fragments from a freshly parsed tree, or update\n    /// an existing set of fragments by replacing the ones that overlap\n    /// with a tree with content from the new tree. When `partial` is\n    /// true, the parse is treated as incomplete, and the resulting\n    /// fragment has [`openEnd`](#common.TreeFragment.openEnd) set to\n    /// true.\n\n  }], [{\n    key: \"addTree\",\n    value: function addTree(tree) {\n      var fragments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      var partial = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var result = [new TreeFragment(0, tree.length, tree, 0, false, partial)];\n\n      var _iterator9 = _createForOfIteratorHelper(fragments),\n          _step9;\n\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var f = _step9.value;\n          if (f.to > tree.length) result.push(f);\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n\n      return result;\n    } /// Apply a set of edits to an array of fragments, removing or\n    /// splitting fragments as necessary to remove edited ranges, and\n    /// adjusting offsets for fragments that moved.\n\n  }, {\n    key: \"applyChanges\",\n    value: function applyChanges(fragments, changes) {\n      var minGap = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 128;\n      if (!changes.length) return fragments;\n      var result = [];\n      var fI = 1,\n          nextF = fragments.length ? fragments[0] : null;\n\n      for (var cI = 0, pos = 0, off = 0;; cI++) {\n        var nextC = cI < changes.length ? changes[cI] : null;\n        var nextPos = nextC ? nextC.fromA : 1e9;\n        if (nextPos - pos >= minGap) while (nextF && nextF.from < nextPos) {\n          var cut = nextF;\n\n          if (pos >= cut.from || nextPos <= cut.to || off) {\n            var fFrom = Math.max(cut.from, pos) - off,\n                fTo = Math.min(cut.to, nextPos) - off;\n            cut = fFrom >= fTo ? null : new TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);\n          }\n\n          if (cut) result.push(cut);\n          if (nextF.to > nextPos) break;\n          nextF = fI < fragments.length ? fragments[fI++] : null;\n        }\n        if (!nextC) break;\n        pos = nextC.toA;\n        off = nextC.toA - nextC.toB;\n      }\n\n      return result;\n    }\n  }]);\n\n  return TreeFragment;\n}(); /// A superclass that parsers should extend.\n\n\nvar Parser = /*#__PURE__*/function () {\n  function Parser() {\n    _classCallCheck(this, Parser);\n  }\n\n  _createClass(Parser, [{\n    key: \"startParse\",\n    /// Start a parse, returning a [partial parse](#common.PartialParse)\n    /// object. [`fragments`](#common.TreeFragment) can be passed in to\n    /// make the parse incremental.\n    ///\n    /// By default, the entire input is parsed. You can pass `ranges`,\n    /// which should be a sorted array of non-empty, non-overlapping\n    /// ranges, to parse only those ranges. The tree returned in that\n    /// case will start at `ranges[0].from`.\n    value: function startParse(input, fragments, ranges) {\n      if (typeof input == \"string\") input = new StringInput(input);\n      ranges = !ranges ? [new Range(0, input.length)] : ranges.length ? ranges.map(function (r) {\n        return new Range(r.from, r.to);\n      }) : [new Range(0, 0)];\n      return this.createParse(input, fragments || [], ranges);\n    } /// Run a full parse, returning the resulting tree.\n\n  }, {\n    key: \"parse\",\n    value: function parse(input, fragments, ranges) {\n      var parse = this.startParse(input, fragments, ranges);\n\n      for (;;) {\n        var done = parse.advance();\n        if (done) return done;\n      }\n    }\n  }]);\n\n  return Parser;\n}();\n\nvar StringInput = /*#__PURE__*/function () {\n  function StringInput(string) {\n    _classCallCheck(this, StringInput);\n\n    this.string = string;\n  }\n\n  _createClass(StringInput, [{\n    key: \"chunk\",\n    value: function chunk(from) {\n      return this.string.slice(from);\n    }\n  }, {\n    key: \"read\",\n    value: function read(from, to) {\n      return this.string.slice(from, to);\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this.string.length;\n    }\n  }, {\n    key: \"lineChunks\",\n    get: function get() {\n      return false;\n    }\n  }]);\n\n  return StringInput;\n}(); /// Create a parse wrapper that, after the inner parse completes,\n/// scans its tree for mixed language regions with the `nest`\n/// function, runs the resulting [inner parses](#common.NestedParse),\n/// and then [mounts](#common.NodeProp^mounted) their results onto the\n/// tree.\n\n\nfunction parseMixed(nest) {\n  return function (parse, input, fragments, ranges) {\n    return new MixedParse(parse, nest, input, fragments, ranges);\n  };\n}\n\nvar InnerParse = function InnerParse(parser, parse, overlay, target, ranges) {\n  _classCallCheck(this, InnerParse);\n\n  this.parser = parser;\n  this.parse = parse;\n  this.overlay = overlay;\n  this.target = target;\n  this.ranges = ranges;\n};\n\nvar ActiveOverlay = function ActiveOverlay(parser, predicate, mounts, index, start, target, prev) {\n  _classCallCheck(this, ActiveOverlay);\n\n  this.parser = parser;\n  this.predicate = predicate;\n  this.mounts = mounts;\n  this.index = index;\n  this.start = start;\n  this.target = target;\n  this.prev = prev;\n  this.depth = 0;\n  this.ranges = [];\n};\n\nvar stoppedInner = new NodeProp({\n  perNode: true\n});\n\nvar MixedParse = /*#__PURE__*/function () {\n  function MixedParse(base, nest, input, fragments, ranges) {\n    _classCallCheck(this, MixedParse);\n\n    this.nest = nest;\n    this.input = input;\n    this.fragments = fragments;\n    this.ranges = ranges;\n    this.inner = [];\n    this.innerDone = 0;\n    this.baseTree = null;\n    this.stoppedAt = null;\n    this.baseParse = base;\n  }\n\n  _createClass(MixedParse, [{\n    key: \"advance\",\n    value: function advance() {\n      if (this.baseParse) {\n        var _done = this.baseParse.advance();\n\n        if (!_done) return null;\n        this.baseParse = null;\n        this.baseTree = _done;\n        this.startInner();\n\n        if (this.stoppedAt != null) {\n          var _iterator10 = _createForOfIteratorHelper(this.inner),\n              _step10;\n\n          try {\n            for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n              var _inner = _step10.value;\n\n              _inner.parse.stopAt(this.stoppedAt);\n            }\n          } catch (err) {\n            _iterator10.e(err);\n          } finally {\n            _iterator10.f();\n          }\n        }\n      }\n\n      if (this.innerDone == this.inner.length) {\n        var result = this.baseTree;\n        if (this.stoppedAt != null) result = new Tree(result.type, result.children, result.positions, result.length, result.propValues.concat([[stoppedInner, this.stoppedAt]]));\n        return result;\n      }\n\n      var inner = this.inner[this.innerDone],\n          done = inner.parse.advance();\n\n      if (done) {\n        this.innerDone++; // This is a somewhat dodgy but super helpful hack where we\n        // patch up nodes created by the inner parse (and thus\n        // presumably not aliased anywhere else) to hold the information\n        // about the inner parse.\n\n        var props = Object.assign(Object.create(null), inner.target.props);\n        props[NodeProp.mounted.id] = new MountedTree(done, inner.overlay, inner.parser);\n        inner.target.props = props;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"stopAt\",\n    value: function stopAt(pos) {\n      this.stoppedAt = pos;\n      if (this.baseParse) this.baseParse.stopAt(pos);else for (var i = this.innerDone; i < this.inner.length; i++) {\n        this.inner[i].parse.stopAt(pos);\n      }\n    }\n  }, {\n    key: \"startInner\",\n    value: function startInner() {\n      var fragmentCursor = new FragmentCursor(this.fragments);\n      var overlay = null;\n      var covered = null;\n      var cursor = new TreeCursor(new TreeNode(this.baseTree, this.ranges[0].from, 0, null), IterMode.IncludeAnonymous | IterMode.IgnoreMounts);\n\n      scan: for (var nest, isCovered; this.stoppedAt == null || cursor.from < this.stoppedAt;) {\n        var enter = true,\n            range = void 0;\n\n        if (fragmentCursor.hasNode(cursor)) {\n          if (overlay) {\n            var match = overlay.mounts.find(function (m) {\n              return m.frag.from <= cursor.from && m.frag.to >= cursor.to && m.mount.overlay;\n            });\n\n            if (match) {\n              var _iterator11 = _createForOfIteratorHelper(match.mount.overlay),\n                  _step11;\n\n              try {\n                var _loop = function _loop() {\n                  var r = _step11.value;\n                  var from = r.from + match.pos,\n                      to = r.to + match.pos;\n                  if (from >= cursor.from && to <= cursor.to && !overlay.ranges.some(function (r) {\n                    return r.from < to && r.to > from;\n                  })) overlay.ranges.push({\n                    from: from,\n                    to: to\n                  });\n                };\n\n                for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n                  _loop();\n                }\n              } catch (err) {\n                _iterator11.e(err);\n              } finally {\n                _iterator11.f();\n              }\n            }\n          }\n\n          enter = false;\n        } else if (covered && (isCovered = checkCover(covered.ranges, cursor.from, cursor.to))) {\n          enter = isCovered != 2\n          /* Full */\n          ;\n        } else if (!cursor.type.isAnonymous && cursor.from < cursor.to && (nest = this.nest(cursor, this.input))) {\n          if (!cursor.tree) materialize(cursor);\n          var oldMounts = fragmentCursor.findMounts(cursor.from, nest.parser);\n\n          if (typeof nest.overlay == \"function\") {\n            overlay = new ActiveOverlay(nest.parser, nest.overlay, oldMounts, this.inner.length, cursor.from, cursor.tree, overlay);\n          } else {\n            var ranges = punchRanges(this.ranges, nest.overlay || [new Range(cursor.from, cursor.to)]);\n            if (ranges.length) this.inner.push(new InnerParse(nest.parser, nest.parser.startParse(this.input, enterFragments(oldMounts, ranges), ranges), nest.overlay ? nest.overlay.map(function (r) {\n              return new Range(r.from - cursor.from, r.to - cursor.from);\n            }) : null, cursor.tree, ranges));\n            if (!nest.overlay) enter = false;else if (ranges.length) covered = {\n              ranges: ranges,\n              depth: 0,\n              prev: covered\n            };\n          }\n        } else if (overlay && (range = overlay.predicate(cursor))) {\n          if (range === true) range = new Range(cursor.from, cursor.to);\n          if (range.from < range.to) overlay.ranges.push(range);\n        }\n\n        if (enter && cursor.firstChild()) {\n          if (overlay) overlay.depth++;\n          if (covered) covered.depth++;\n        } else {\n          for (;;) {\n            if (cursor.nextSibling()) break;\n            if (!cursor.parent()) break scan;\n\n            if (overlay && ! --overlay.depth) {\n              var _ranges = punchRanges(this.ranges, overlay.ranges);\n\n              if (_ranges.length) this.inner.splice(overlay.index, 0, new InnerParse(overlay.parser, overlay.parser.startParse(this.input, enterFragments(overlay.mounts, _ranges), _ranges), overlay.ranges.map(function (r) {\n                return new Range(r.from - overlay.start, r.to - overlay.start);\n              }), overlay.target, _ranges));\n              overlay = overlay.prev;\n            }\n\n            if (covered && ! --covered.depth) covered = covered.prev;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"parsedPos\",\n    get: function get() {\n      if (this.baseParse) return 0;\n      var pos = this.input.length;\n\n      for (var i = this.innerDone; i < this.inner.length; i++) {\n        if (this.inner[i].ranges[0].from < pos) pos = Math.min(pos, this.inner[i].parse.parsedPos);\n      }\n\n      return pos;\n    }\n  }]);\n\n  return MixedParse;\n}();\n\nfunction checkCover(covered, from, to) {\n  var _iterator12 = _createForOfIteratorHelper(covered),\n      _step12;\n\n  try {\n    for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n      var range = _step12.value;\n      if (range.from >= to) break;\n      if (range.to > from) return range.from <= from && range.to >= to ? 2\n      /* Full */\n      : 1\n      /* Partial */\n      ;\n    }\n  } catch (err) {\n    _iterator12.e(err);\n  } finally {\n    _iterator12.f();\n  }\n\n  return 0\n  /* None */\n  ;\n} // Take a piece of buffer and convert it into a stand-alone\n// TreeBuffer.\n\n\nfunction sliceBuf(buf, startI, endI, nodes, positions, off) {\n  if (startI < endI) {\n    var from = buf.buffer[startI + 1],\n        to = buf.buffer[endI - 2];\n    nodes.push(buf.slice(startI, endI, from, to));\n    positions.push(from - off);\n  }\n} // This function takes a node that's in a buffer, and converts it, and\n// its parent buffer nodes, into a Tree. This is again acting on the\n// assumption that the trees and buffers have been constructed by the\n// parse that was ran via the mix parser, and thus aren't shared with\n// any other code, making violations of the immutability safe.\n\n\nfunction materialize(cursor) {\n  var node = cursor.node,\n      depth = 0; // Scan up to the nearest tree\n\n  do {\n    cursor.parent();\n    depth++;\n  } while (!cursor.tree); // Find the index of the buffer in that tree\n\n\n  var i = 0,\n      base = cursor.tree,\n      off = 0;\n\n  for (;; i++) {\n    off = base.positions[i] + cursor.from;\n    if (off <= node.from && off + base.children[i].length >= node.to) break;\n  }\n\n  var buf = base.children[i],\n      b = buf.buffer; // Split a level in the buffer, putting the nodes before and after\n  // the child that contains `node` into new buffers.\n\n  function split(startI, endI, type, innerOffset, length) {\n    var i = startI;\n\n    while (b[i + 2] + off <= node.from) {\n      i = b[i + 3];\n    }\n\n    var children = [],\n        positions = [];\n    sliceBuf(buf, startI, i, children, positions, innerOffset);\n    var from = b[i + 1],\n        to = b[i + 2];\n    var isTarget = from + off == node.from && to + off == node.to && b[i] == node.type.id;\n    children.push(isTarget ? node.toTree() : split(i + 4, b[i + 3], buf.set.types[b[i]], from, to - from));\n    positions.push(from - innerOffset);\n    sliceBuf(buf, b[i + 3], endI, children, positions, innerOffset);\n    return new Tree(type, children, positions, length);\n  }\n\n  base.children[i] = split(0, b.length, NodeType.none, 0, buf.length); // Move the cursor back to the target node\n\n  for (var d = 0; d <= depth; d++) {\n    cursor.childAfter(node.from);\n  }\n}\n\nvar StructureCursor = /*#__PURE__*/function () {\n  function StructureCursor(root, offset) {\n    _classCallCheck(this, StructureCursor);\n\n    this.offset = offset;\n    this.done = false;\n    this.cursor = root.cursor(IterMode.IncludeAnonymous | IterMode.IgnoreMounts);\n  } // Move to the first node (in pre-order) that starts at or after `pos`.\n\n\n  _createClass(StructureCursor, [{\n    key: \"moveTo\",\n    value: function moveTo(pos) {\n      var cursor = this.cursor,\n          p = pos - this.offset;\n\n      while (!this.done && cursor.from < p) {\n        if (cursor.to >= pos && cursor.enter(p, 1, IterMode.IgnoreOverlays | IterMode.ExcludeBuffers)) ;else if (!cursor.next(false)) this.done = true;\n      }\n    }\n  }, {\n    key: \"hasNode\",\n    value: function hasNode(cursor) {\n      this.moveTo(cursor.from);\n\n      if (!this.done && this.cursor.from + this.offset == cursor.from && this.cursor.tree) {\n        for (var tree = this.cursor.tree;;) {\n          if (tree == cursor.tree) return true;\n          if (tree.children.length && tree.positions[0] == 0 && tree.children[0] instanceof Tree) tree = tree.children[0];else break;\n        }\n      }\n\n      return false;\n    }\n  }]);\n\n  return StructureCursor;\n}();\n\nvar FragmentCursor = /*#__PURE__*/function () {\n  function FragmentCursor(fragments) {\n    _classCallCheck(this, FragmentCursor);\n\n    var _a;\n\n    this.fragments = fragments;\n    this.curTo = 0;\n    this.fragI = 0;\n\n    if (fragments.length) {\n      var first = this.curFrag = fragments[0];\n      this.curTo = (_a = first.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : first.to;\n      this.inner = new StructureCursor(first.tree, -first.offset);\n    } else {\n      this.curFrag = this.inner = null;\n    }\n  }\n\n  _createClass(FragmentCursor, [{\n    key: \"hasNode\",\n    value: function hasNode(node) {\n      while (this.curFrag && node.from >= this.curTo) {\n        this.nextFrag();\n      }\n\n      return this.curFrag && this.curFrag.from <= node.from && this.curTo >= node.to && this.inner.hasNode(node);\n    }\n  }, {\n    key: \"nextFrag\",\n    value: function nextFrag() {\n      var _a;\n\n      this.fragI++;\n\n      if (this.fragI == this.fragments.length) {\n        this.curFrag = this.inner = null;\n      } else {\n        var frag = this.curFrag = this.fragments[this.fragI];\n        this.curTo = (_a = frag.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : frag.to;\n        this.inner = new StructureCursor(frag.tree, -frag.offset);\n      }\n    }\n  }, {\n    key: \"findMounts\",\n    value: function findMounts(pos, parser) {\n      var _a;\n\n      var result = [];\n\n      if (this.inner) {\n        this.inner.cursor.moveTo(pos, 1);\n\n        for (var _pos = this.inner.cursor.node; _pos; _pos = _pos.parent) {\n          var mount = (_a = _pos.tree) === null || _a === void 0 ? void 0 : _a.prop(NodeProp.mounted);\n\n          if (mount && mount.parser == parser) {\n            for (var i = this.fragI; i < this.fragments.length; i++) {\n              var frag = this.fragments[i];\n              if (frag.from >= _pos.to) break;\n              if (frag.tree == this.curFrag.tree) result.push({\n                frag: frag,\n                pos: _pos.from - frag.offset,\n                mount: mount\n              });\n            }\n          }\n        }\n      }\n\n      return result;\n    }\n  }]);\n\n  return FragmentCursor;\n}();\n\nfunction punchRanges(outer, ranges) {\n  var copy = null,\n      current = ranges;\n\n  for (var i = 1, j = 0; i < outer.length; i++) {\n    var gapFrom = outer[i - 1].to,\n        gapTo = outer[i].from;\n\n    for (; j < current.length; j++) {\n      var r = current[j];\n      if (r.from >= gapTo) break;\n      if (r.to <= gapFrom) continue;\n      if (!copy) current = copy = ranges.slice();\n\n      if (r.from < gapFrom) {\n        copy[j] = new Range(r.from, gapFrom);\n        if (r.to > gapTo) copy.splice(j + 1, 0, new Range(gapTo, r.to));\n      } else if (r.to > gapTo) {\n        copy[j--] = new Range(gapTo, r.to);\n      } else {\n        copy.splice(j--, 1);\n      }\n    }\n  }\n\n  return current;\n}\n\nfunction findCoverChanges(a, b, from, to) {\n  var iA = 0,\n      iB = 0,\n      inA = false,\n      inB = false,\n      pos = -1e9;\n  var result = [];\n\n  for (;;) {\n    var nextA = iA == a.length ? 1e9 : inA ? a[iA].to : a[iA].from;\n    var nextB = iB == b.length ? 1e9 : inB ? b[iB].to : b[iB].from;\n\n    if (inA != inB) {\n      var start = Math.max(pos, from),\n          end = Math.min(nextA, nextB, to);\n      if (start < end) result.push(new Range(start, end));\n    }\n\n    pos = Math.min(nextA, nextB);\n    if (pos == 1e9) break;\n\n    if (nextA == pos) {\n      if (!inA) inA = true;else {\n        inA = false;\n        iA++;\n      }\n    }\n\n    if (nextB == pos) {\n      if (!inB) inB = true;else {\n        inB = false;\n        iB++;\n      }\n    }\n  }\n\n  return result;\n} // Given a number of fragments for the outer tree, and a set of ranges\n// to parse, find fragments for inner trees mounted around those\n// ranges, if any.\n\n\nfunction enterFragments(mounts, ranges) {\n  var result = [];\n\n  var _iterator13 = _createForOfIteratorHelper(mounts),\n      _step13;\n\n  try {\n    var _loop2 = function _loop2() {\n      var _step13$value = _step13.value,\n          pos = _step13$value.pos,\n          mount = _step13$value.mount,\n          frag = _step13$value.frag;\n      var startPos = pos + (mount.overlay ? mount.overlay[0].from : 0),\n          endPos = startPos + mount.tree.length;\n      var from = Math.max(frag.from, startPos),\n          to = Math.min(frag.to, endPos);\n\n      if (mount.overlay) {\n        var overlay = mount.overlay.map(function (r) {\n          return new Range(r.from + pos, r.to + pos);\n        });\n        var changes = findCoverChanges(ranges, overlay, from, to);\n\n        for (var i = 0, _pos2 = from;; i++) {\n          var last = i == changes.length,\n              end = last ? to : changes[i].from;\n          if (end > _pos2) result.push(new TreeFragment(_pos2, end, mount.tree, -startPos, frag.from >= _pos2, frag.to <= end));\n          if (last) break;\n          _pos2 = changes[i].to;\n        }\n      } else {\n        result.push(new TreeFragment(from, to, mount.tree, -startPos, frag.from >= startPos, frag.to <= endPos));\n      }\n    };\n\n    for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n      _loop2();\n    }\n  } catch (err) {\n    _iterator13.e(err);\n  } finally {\n    _iterator13.f();\n  }\n\n  return result;\n}\n\nexport { DefaultBufferLength, IterMode, MountedTree, NodeProp, NodeSet, NodeType, NodeWeakMap, Parser, Tree, TreeBuffer, TreeCursor, TreeFragment, parseMixed };","map":null,"metadata":{},"sourceType":"module"}