{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { parser } from '@lezer/javascript';\nimport { syntaxTree, LRLanguage, indentNodeProp, continuedIndent, flatIndent, delimitedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';\nimport { EditorSelection } from '@codemirror/state';\nimport { EditorView } from '@codemirror/view';\nimport { snippetCompletion, ifNotIn, completeFromList } from '@codemirror/autocomplete';\nimport { NodeWeakMap, IterMode } from '@lezer/common';\n/**\nA collection of JavaScript-related\n[snippets](https://codemirror.net/6/docs/ref/#autocomplete.snippet).\n*/\n\nvar snippets = [/*@__PURE__*/snippetCompletion(\"function ${name}(${params}) {\\n\\t${}\\n}\", {\n  label: \"function\",\n  detail: \"definition\",\n  type: \"keyword\"\n}), /*@__PURE__*/snippetCompletion(\"for (let ${index} = 0; ${index} < ${bound}; ${index}++) {\\n\\t${}\\n}\", {\n  label: \"for\",\n  detail: \"loop\",\n  type: \"keyword\"\n}), /*@__PURE__*/snippetCompletion(\"for (let ${name} of ${collection}) {\\n\\t${}\\n}\", {\n  label: \"for\",\n  detail: \"of loop\",\n  type: \"keyword\"\n}), /*@__PURE__*/snippetCompletion(\"do {\\n\\t${}\\n} while (${})\", {\n  label: \"do\",\n  detail: \"loop\",\n  type: \"keyword\"\n}), /*@__PURE__*/snippetCompletion(\"while (${}) {\\n\\t${}\\n}\", {\n  label: \"while\",\n  detail: \"loop\",\n  type: \"keyword\"\n}), /*@__PURE__*/snippetCompletion(\"try {\\n\\t${}\\n} catch (${error}) {\\n\\t${}\\n}\", {\n  label: \"try\",\n  detail: \"/ catch block\",\n  type: \"keyword\"\n}), /*@__PURE__*/snippetCompletion(\"if (${}) {\\n\\t${}\\n}\", {\n  label: \"if\",\n  detail: \"block\",\n  type: \"keyword\"\n}), /*@__PURE__*/snippetCompletion(\"if (${}) {\\n\\t${}\\n} else {\\n\\t${}\\n}\", {\n  label: \"if\",\n  detail: \"/ else block\",\n  type: \"keyword\"\n}), /*@__PURE__*/snippetCompletion(\"class ${name} {\\n\\tconstructor(${params}) {\\n\\t\\t${}\\n\\t}\\n}\", {\n  label: \"class\",\n  detail: \"definition\",\n  type: \"keyword\"\n}), /*@__PURE__*/snippetCompletion(\"import {${names}} from \\\"${module}\\\"\\n${}\", {\n  label: \"import\",\n  detail: \"named\",\n  type: \"keyword\"\n}), /*@__PURE__*/snippetCompletion(\"import ${name} from \\\"${module}\\\"\\n${}\", {\n  label: \"import\",\n  detail: \"default\",\n  type: \"keyword\"\n})];\nvar cache = /*@__PURE__*/new NodeWeakMap();\nvar ScopeNodes = /*@__PURE__*/new Set([\"Script\", \"Block\", \"FunctionExpression\", \"FunctionDeclaration\", \"ArrowFunction\", \"MethodDeclaration\", \"ForStatement\"]);\n\nfunction defID(type) {\n  return function (node, def) {\n    var id = node.node.getChild(\"VariableDefinition\");\n    if (id) def(id, type);\n    return true;\n  };\n}\n\nvar functionContext = [\"FunctionDeclaration\"];\nvar gatherCompletions = {\n  FunctionDeclaration: /*@__PURE__*/defID(\"function\"),\n  ClassDeclaration: /*@__PURE__*/defID(\"class\"),\n  ClassExpression: function ClassExpression() {\n    return true;\n  },\n  EnumDeclaration: /*@__PURE__*/defID(\"constant\"),\n  TypeAliasDeclaration: /*@__PURE__*/defID(\"type\"),\n  NamespaceDeclaration: /*@__PURE__*/defID(\"namespace\"),\n  VariableDefinition: function VariableDefinition(node, def) {\n    if (!node.matchContext(functionContext)) def(node, \"variable\");\n  },\n  TypeDefinition: function TypeDefinition(node, def) {\n    def(node, \"type\");\n  },\n  __proto__: null\n};\n\nfunction getScope(doc, node) {\n  var cached = cache.get(node);\n  if (cached) return cached;\n  var completions = [],\n      top = true;\n\n  function def(node, type) {\n    var name = doc.sliceString(node.from, node.to);\n    completions.push({\n      label: name,\n      type: type\n    });\n  }\n\n  node.cursor(IterMode.IncludeAnonymous).iterate(function (node) {\n    if (top) {\n      top = false;\n    } else if (node.name) {\n      var gather = gatherCompletions[node.name];\n      if (gather && gather(node, def) || ScopeNodes.has(node.name)) return false;\n    } else if (node.to - node.from > 8192) {\n      // Allow caching for bigger internal nodes\n      var _iterator = _createForOfIteratorHelper(getScope(doc, node.node)),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var c = _step.value;\n          completions.push(c);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return false;\n    }\n  });\n  cache.set(node, completions);\n  return completions;\n}\n\nvar Identifier = /^[\\w$\\xa1-\\uffff][\\w$\\d\\xa1-\\uffff]*$/;\nvar dontComplete = [\"TemplateString\", \"String\", \"RegExp\", \"LineComment\", \"BlockComment\", \"VariableDefinition\", \"TypeDefinition\", \"Label\", \"PropertyDefinition\", \"PropertyName\", \"PrivatePropertyDefinition\", \"PrivatePropertyName\"];\n/**\nCompletion source that looks up locally defined names in\nJavaScript code.\n*/\n\nfunction localCompletionSource(context) {\n  var inner = syntaxTree(context.state).resolveInner(context.pos, -1);\n  if (dontComplete.indexOf(inner.name) > -1) return null;\n  var isWord = inner.to - inner.from < 20 && Identifier.test(context.state.sliceDoc(inner.from, inner.to));\n  if (!isWord && !context.explicit) return null;\n  var options = [];\n\n  for (var pos = inner; pos; pos = pos.parent) {\n    if (ScopeNodes.has(pos.name)) options = options.concat(getScope(context.state.doc, pos));\n  }\n\n  return {\n    options: options,\n    from: isWord ? inner.from : context.pos,\n    validFor: Identifier\n  };\n}\n/**\nA language provider based on the [Lezer JavaScript\nparser](https://github.com/lezer-parser/javascript), extended with\nhighlighting and indentation information.\n*/\n\n\nvar javascriptLanguage = /*@__PURE__*/LRLanguage.define({\n  parser: /*@__PURE__*/parser.configure({\n    props: [/*@__PURE__*/indentNodeProp.add({\n      IfStatement: /*@__PURE__*/continuedIndent({\n        except: /^\\s*({|else\\b)/\n      }),\n      TryStatement: /*@__PURE__*/continuedIndent({\n        except: /^\\s*({|catch\\b|finally\\b)/\n      }),\n      LabeledStatement: flatIndent,\n      SwitchBody: function SwitchBody(context) {\n        var after = context.textAfter,\n            closed = /^\\s*\\}/.test(after),\n            isCase = /^\\s*(case|default)\\b/.test(after);\n        return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit;\n      },\n      Block: /*@__PURE__*/delimitedIndent({\n        closing: \"}\"\n      }),\n      ArrowFunction: function ArrowFunction(cx) {\n        return cx.baseIndent + cx.unit;\n      },\n      \"TemplateString BlockComment\": function TemplateStringBlockComment() {\n        return null;\n      },\n      \"Statement Property\": /*@__PURE__*/continuedIndent({\n        except: /^{/\n      }),\n      JSXElement: function JSXElement(context) {\n        var closed = /^\\s*<\\//.test(context.textAfter);\n        return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);\n      },\n      JSXEscape: function JSXEscape(context) {\n        var closed = /\\s*\\}/.test(context.textAfter);\n        return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);\n      },\n      \"JSXOpenTag JSXSelfClosingTag\": function JSXOpenTagJSXSelfClosingTag(context) {\n        return context.column(context.node.from) + context.unit;\n      }\n    }), /*@__PURE__*/foldNodeProp.add({\n      \"Block ClassBody SwitchBody EnumBody ObjectExpression ArrayExpression\": foldInside,\n      BlockComment: function BlockComment(tree) {\n        return {\n          from: tree.from + 2,\n          to: tree.to - 2\n        };\n      }\n    })]\n  }),\n  languageData: {\n    closeBrackets: {\n      brackets: [\"(\", \"[\", \"{\", \"'\", '\"', \"`\"]\n    },\n    commentTokens: {\n      line: \"//\",\n      block: {\n        open: \"/*\",\n        close: \"*/\"\n      }\n    },\n    indentOnInput: /^\\s*(?:case |default:|\\{|\\}|<\\/)$/,\n    wordChars: \"$\"\n  }\n});\n/**\nA language provider for TypeScript.\n*/\n\nvar typescriptLanguage = /*@__PURE__*/javascriptLanguage.configure({\n  dialect: \"ts\"\n});\n/**\nLanguage provider for JSX.\n*/\n\nvar jsxLanguage = /*@__PURE__*/javascriptLanguage.configure({\n  dialect: \"jsx\"\n});\n/**\nLanguage provider for JSX + TypeScript.\n*/\n\nvar tsxLanguage = /*@__PURE__*/javascriptLanguage.configure({\n  dialect: \"jsx ts\"\n});\nvar keywords = /*@__PURE__*/\"break case const continue default delete export extends false finally in instanceof let new return static super switch this throw true typeof var yield\".split(\" \").map(function (kw) {\n  return {\n    label: kw,\n    type: \"keyword\"\n  };\n});\n/**\nJavaScript support. Includes [snippet](https://codemirror.net/6/docs/ref/#lang-javascript.snippets)\ncompletion.\n*/\n\nfunction javascript() {\n  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var lang = config.jsx ? config.typescript ? tsxLanguage : jsxLanguage : config.typescript ? typescriptLanguage : javascriptLanguage;\n  return new LanguageSupport(lang, [javascriptLanguage.data.of({\n    autocomplete: ifNotIn(dontComplete, completeFromList(snippets.concat(keywords)))\n  }), javascriptLanguage.data.of({\n    autocomplete: localCompletionSource\n  }), config.jsx ? autoCloseTags : []]);\n}\n\nfunction elementName(doc, tree) {\n  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : doc.length;\n  if (!tree) return \"\";\n  var name = tree.getChild(\"JSXIdentifier\");\n  return name ? doc.sliceString(name.from, Math.min(name.to, max)) : \"\";\n}\n\nvar android = typeof navigator == \"object\" && /*@__PURE__*/ /Android\\b/.test(navigator.userAgent);\n/**\nExtension that will automatically insert JSX close tags when a `>` or\n`/` is typed.\n*/\n\nvar autoCloseTags = /*@__PURE__*/EditorView.inputHandler.of(function (view, from, to, text) {\n  if ((android ? view.composing : view.compositionStarted) || view.state.readOnly || from != to || text != \">\" && text != \"/\" || !javascriptLanguage.isActiveAt(view.state, from, -1)) return false;\n  var state = view.state;\n  var changes = state.changeByRange(function (range) {\n    var _a, _b, _c;\n\n    var head = range.head,\n        around = syntaxTree(state).resolveInner(head, -1),\n        name;\n    if (around.name == \"JSXStartTag\") around = around.parent;\n\n    if (text == \">\" && around.name == \"JSXFragmentTag\") {\n      return {\n        range: EditorSelection.cursor(head + 1),\n        changes: {\n          from: head,\n          insert: \"><>\"\n        }\n      };\n    } else if (text == \">\" && around.name == \"JSXIdentifier\") {\n      if (((_b = (_a = around.parent) === null || _a === void 0 ? void 0 : _a.lastChild) === null || _b === void 0 ? void 0 : _b.name) != \"JSXEndTag\" && (name = elementName(state.doc, around.parent, head))) return {\n        range: EditorSelection.cursor(head + 1),\n        changes: {\n          from: head,\n          insert: \"></\".concat(name, \">\")\n        }\n      };\n    } else if (text == \"/\" && around.name == \"JSXFragmentTag\") {\n      var empty = around.parent,\n          base = empty === null || empty === void 0 ? void 0 : empty.parent;\n\n      if (empty.from == head - 1 && ((_c = base.lastChild) === null || _c === void 0 ? void 0 : _c.name) != \"JSXEndTag\" && (name = elementName(state.doc, base === null || base === void 0 ? void 0 : base.firstChild, head))) {\n        var insert = \"/\".concat(name, \">\");\n        return {\n          range: EditorSelection.cursor(head + insert.length),\n          changes: {\n            from: head,\n            insert: insert\n          }\n        };\n      }\n    }\n\n    return {\n      range: range\n    };\n  });\n  if (changes.changes.empty) return false;\n  view.dispatch(changes, {\n    userEvent: \"input.type\",\n    scrollIntoView: true\n  });\n  return true;\n});\n/**\nConnects an [ESLint](https://eslint.org/) linter to CodeMirror's\n[lint](https://codemirror.net/6/docs/ref/#lint) integration. `eslint` should be an instance of the\n[`Linter`](https://eslint.org/docs/developer-guide/nodejs-api#linter)\nclass, and `config` an optional ESLint configuration. The return\nvalue of this function can be passed to [`linter`](https://codemirror.net/6/docs/ref/#lint.linter)\nto create a JavaScript linting extension.\n\nNote that ESLint targets node, and is tricky to run in the\nbrowser. The [eslint4b](https://github.com/mysticatea/eslint4b)\nand\n[eslint4b-prebuilt](https://github.com/marijnh/eslint4b-prebuilt/)\npackages may help with that.\n*/\n\nfunction esLint(eslint, config) {\n  if (!config) {\n    config = {\n      parserOptions: {\n        ecmaVersion: 2019,\n        sourceType: \"module\"\n      },\n      env: {\n        browser: true,\n        node: true,\n        es6: true,\n        es2015: true,\n        es2017: true,\n        es2020: true\n      },\n      rules: {}\n    };\n    eslint.getRules().forEach(function (desc, name) {\n      if (desc.meta.docs.recommended) config.rules[name] = 2;\n    });\n  }\n\n  return function (view) {\n    var state = view.state,\n        found = [];\n\n    var _iterator2 = _createForOfIteratorHelper(javascriptLanguage.findRegions(state)),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var _step2$value = _step2.value,\n            from = _step2$value.from,\n            to = _step2$value.to;\n        var fromLine = state.doc.lineAt(from),\n            offset = {\n          line: fromLine.number - 1,\n          col: from - fromLine.from,\n          pos: from\n        };\n\n        var _iterator3 = _createForOfIteratorHelper(eslint.verify(state.sliceDoc(from, to), config)),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var d = _step3.value;\n            found.push(translateDiagnostic(d, state.doc, offset));\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    return found;\n  };\n}\n\nfunction mapPos(line, col, doc, offset) {\n  return doc.line(line + offset.line).from + col + (line == 1 ? offset.col - 1 : -1);\n}\n\nfunction translateDiagnostic(input, doc, offset) {\n  var start = mapPos(input.line, input.column, doc, offset);\n  var result = {\n    from: start,\n    to: input.endLine != null && input.endColumn != 1 ? mapPos(input.endLine, input.endColumn, doc, offset) : start,\n    message: input.message,\n    source: input.ruleId ? \"eslint:\" + input.ruleId : \"eslint\",\n    severity: input.severity == 1 ? \"warning\" : \"error\"\n  };\n\n  if (input.fix) {\n    var _input$fix = input.fix,\n        range = _input$fix.range,\n        text = _input$fix.text,\n        from = range[0] + offset.pos - start,\n        to = range[1] + offset.pos - start;\n    result.actions = [{\n      name: \"fix\",\n      apply: function apply(view, start) {\n        view.dispatch({\n          changes: {\n            from: start + from,\n            to: start + to,\n            insert: text\n          },\n          scrollIntoView: true\n        });\n      }\n    }];\n  }\n\n  return result;\n}\n\nexport { autoCloseTags, esLint, javascript, javascriptLanguage, jsxLanguage, localCompletionSource, snippets, tsxLanguage, typescriptLanguage };","map":null,"metadata":{},"sourceType":"module"}