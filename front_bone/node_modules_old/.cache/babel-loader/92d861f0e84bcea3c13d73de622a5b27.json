{"ast":null,"code":"import _classCallCheck from \"/home/ayaz/Projects/boosthub.com/front_bone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ayaz/Projects/boosthub.com/front_bone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nvar C = \"\\u037C\";\nvar COUNT = typeof Symbol == \"undefined\" ? \"__\" + C : Symbol.for(C);\nvar SET = typeof Symbol == \"undefined\" ? \"__styleSet\" + Math.floor(Math.random() * 1e8) : Symbol(\"styleSet\");\nvar top = typeof globalThis != \"undefined\" ? globalThis : typeof window != \"undefined\" ? window : {}; // :: - Style modules encapsulate a set of CSS rules defined from\n// JavaScript. Their definitions are only available in a given DOM\n// root after it has been _mounted_ there with `StyleModule.mount`.\n//\n// Style modules should be created once and stored somewhere, as\n// opposed to re-creating them every time you need them. The amount of\n// CSS rules generated for a given DOM root is bounded by the amount\n// of style modules that were used. So to avoid leaking rules, don't\n// create these dynamically, but treat them as one-time allocations.\n\nexport var StyleModule = /*#__PURE__*/function () {\n  // :: (Object<Style>, ?{finish: ?(string) → string})\n  // Create a style module from the given spec.\n  //\n  // When `finish` is given, it is called on regular (non-`@`)\n  // selectors (after `&` expansion) to compute the final selector.\n  function StyleModule(spec, options) {\n    _classCallCheck(this, StyleModule);\n\n    this.rules = [];\n\n    var _ref = options || {},\n        finish = _ref.finish;\n\n    function splitSelector(selector) {\n      return /^@/.test(selector) ? [selector] : selector.split(/,\\s*/);\n    }\n\n    function render(selectors, spec, target, isKeyframes) {\n      var local = [],\n          isAt = /^@(\\w+)\\b/.exec(selectors[0]),\n          keyframes = isAt && isAt[1] == \"keyframes\";\n      if (isAt && spec == null) return target.push(selectors[0] + \";\");\n\n      for (var prop in spec) {\n        var value = spec[prop];\n\n        if (/&/.test(prop)) {\n          render(prop.split(/,\\s*/).map(function (part) {\n            return selectors.map(function (sel) {\n              return part.replace(/&/, sel);\n            });\n          }).reduce(function (a, b) {\n            return a.concat(b);\n          }), value, target);\n        } else if (value && typeof value == \"object\") {\n          if (!isAt) throw new RangeError(\"The value of a property (\" + prop + \") should be a primitive value.\");\n          render(splitSelector(prop), value, local, keyframes);\n        } else if (value != null) {\n          local.push(prop.replace(/_.*/, \"\").replace(/[A-Z]/g, function (l) {\n            return \"-\" + l.toLowerCase();\n          }) + \": \" + value + \";\");\n        }\n      }\n\n      if (local.length || keyframes) {\n        target.push((finish && !isAt && !isKeyframes ? selectors.map(finish) : selectors).join(\", \") + \" {\" + local.join(\" \") + \"}\");\n      }\n    }\n\n    for (var prop in spec) {\n      render(splitSelector(prop), spec[prop], this.rules);\n    }\n  } // :: () → string\n  // Returns a string containing the module's CSS rules.\n\n\n  _createClass(StyleModule, [{\n    key: \"getRules\",\n    value: function getRules() {\n      return this.rules.join(\"\\n\");\n    } // :: () → string\n    // Generate a new unique CSS class name.\n\n  }], [{\n    key: \"newName\",\n    value: function newName() {\n      var id = top[COUNT] || 1;\n      top[COUNT] = id + 1;\n      return C + id.toString(36);\n    } // :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>)\n    //\n    // Mount the given set of modules in the given DOM root, which ensures\n    // that the CSS rules defined by the module are available in that\n    // context.\n    //\n    // Rules are only added to the document once per root.\n    //\n    // Rule order will follow the order of the modules, so that rules from\n    // modules later in the array take precedence of those from earlier\n    // modules. If you call this function multiple times for the same root\n    // in a way that changes the order of already mounted modules, the old\n    // order will be changed.\n\n  }, {\n    key: \"mount\",\n    value: function mount(root, modules) {\n      (root[SET] || new StyleSet(root)).mount(Array.isArray(modules) ? modules : [modules]);\n    }\n  }]);\n\n  return StyleModule;\n}();\nvar adoptedSet = null;\n\nvar StyleSet = /*#__PURE__*/function () {\n  function StyleSet(root) {\n    _classCallCheck(this, StyleSet);\n\n    if (!root.head && root.adoptedStyleSheets && typeof CSSStyleSheet != \"undefined\") {\n      if (adoptedSet) {\n        root.adoptedStyleSheets = [adoptedSet.sheet].concat(root.adoptedStyleSheets);\n        return root[SET] = adoptedSet;\n      }\n\n      this.sheet = new CSSStyleSheet();\n      root.adoptedStyleSheets = [this.sheet].concat(root.adoptedStyleSheets);\n      adoptedSet = this;\n    } else {\n      this.styleTag = (root.ownerDocument || root).createElement(\"style\");\n      var target = root.head || root;\n      target.insertBefore(this.styleTag, target.firstChild);\n    }\n\n    this.modules = [];\n    root[SET] = this;\n  }\n\n  _createClass(StyleSet, [{\n    key: \"mount\",\n    value: function mount(modules) {\n      var sheet = this.sheet;\n      var pos = 0\n      /* Current rule offset */\n      ,\n          j = 0;\n      /* Index into this.modules */\n\n      for (var i = 0; i < modules.length; i++) {\n        var mod = modules[i],\n            index = this.modules.indexOf(mod);\n\n        if (index < j && index > -1) {\n          // Ordering conflict\n          this.modules.splice(index, 1);\n          j--;\n          index = -1;\n        }\n\n        if (index == -1) {\n          this.modules.splice(j++, 0, mod);\n          if (sheet) for (var k = 0; k < mod.rules.length; k++) {\n            sheet.insertRule(mod.rules[k], pos++);\n          }\n        } else {\n          while (j < index) {\n            pos += this.modules[j++].rules.length;\n          }\n\n          pos += mod.rules.length;\n          j++;\n        }\n      }\n\n      if (!sheet) {\n        var text = \"\";\n\n        for (var _i = 0; _i < this.modules.length; _i++) {\n          text += this.modules[_i].getRules() + \"\\n\";\n        }\n\n        this.styleTag.textContent = text;\n      }\n    }\n  }]);\n\n  return StyleSet;\n}(); // Style::Object<union<Style,string>>\n//\n// A style is an object that, in the simple case, maps CSS property\n// names to strings holding their values, as in `{color: \"red\",\n// fontWeight: \"bold\"}`. The property names can be given in\n// camel-case—the library will insert a dash before capital letters\n// when converting them to CSS.\n//\n// If you include an underscore in a property name, it and everything\n// after it will be removed from the output, which can be useful when\n// providing a property multiple times, for browser compatibility\n// reasons.\n//\n// A property in a style object can also be a sub-selector, which\n// extends the current context to add a pseudo-selector or a child\n// selector. Such a property should contain a `&` character, which\n// will be replaced by the current selector. For example `{\"&:before\":\n// {content: '\"hi\"'}}`. Sub-selectors and regular properties can\n// freely be mixed in a given object. Any property containing a `&` is\n// assumed to be a sub-selector.\n//\n// Finally, a property can specify an @-block to be wrapped around the\n// styles defined inside the object that's the property's value. For\n// example to create a media query you can do `{\"@media screen and\n// (min-width: 400px)\": {...}}`.","map":null,"metadata":{},"sourceType":"module"}