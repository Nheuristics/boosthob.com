{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n/**\n * Tag-closer extension for CodeMirror.\n *\n * This extension adds an \"autoCloseTags\" option that can be set to\n * either true to get the default behavior, or an object to further\n * configure its behavior.\n *\n * These are supported options:\n *\n * `whenClosing` (default true)\n *   Whether to autoclose when the '/' of a closing tag is typed.\n * `whenOpening` (default true)\n *   Whether to autoclose the tag when the final '>' of an opening\n *   tag is typed.\n * `dontCloseTags` (default is empty tags for HTML, none for XML)\n *   An array of tag names that should not be autoclosed.\n * `indentTags` (default is block tags for HTML, none for XML)\n *   An array of tag names that should, when opened, cause a\n *   blank line to be added inside the tag, and the blank line and\n *   closing line to be indented.\n * `emptyTags` (default is none)\n *   An array of XML tag names that should be autoclosed with '/>'.\n *\n * See demos/closetag.html for a usage example.\n */\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../fold/xml-fold\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../fold/xml-fold\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  CodeMirror.defineOption(\"autoCloseTags\", false, function (cm, val, old) {\n    if (old != CodeMirror.Init && old) cm.removeKeyMap(\"autoCloseTags\");\n    if (!val) return;\n    var map = {\n      name: \"autoCloseTags\"\n    };\n    if (typeof val != \"object\" || val.whenClosing !== false) map[\"'/'\"] = function (cm) {\n      return autoCloseSlash(cm);\n    };\n    if (typeof val != \"object\" || val.whenOpening !== false) map[\"'>'\"] = function (cm) {\n      return autoCloseGT(cm);\n    };\n    cm.addKeyMap(map);\n  });\n  var htmlDontClose = [\"area\", \"base\", \"br\", \"col\", \"command\", \"embed\", \"hr\", \"img\", \"input\", \"keygen\", \"link\", \"meta\", \"param\", \"source\", \"track\", \"wbr\"];\n  var htmlIndent = [\"applet\", \"blockquote\", \"body\", \"button\", \"div\", \"dl\", \"fieldset\", \"form\", \"frameset\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"head\", \"html\", \"iframe\", \"layer\", \"legend\", \"object\", \"ol\", \"p\", \"select\", \"table\", \"ul\"];\n\n  function autoCloseGT(cm) {\n    if (cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n    var ranges = cm.listSelections(),\n        replacements = [];\n    var opt = cm.getOption(\"autoCloseTags\");\n\n    for (var i = 0; i < ranges.length; i++) {\n      if (!ranges[i].empty()) return CodeMirror.Pass;\n      var pos = ranges[i].head,\n          tok = cm.getTokenAt(pos);\n      var inner = CodeMirror.innerMode(cm.getMode(), tok.state),\n          state = inner.state;\n      var tagInfo = inner.mode.xmlCurrentTag && inner.mode.xmlCurrentTag(state);\n      var tagName = tagInfo && tagInfo.name;\n      if (!tagName) return CodeMirror.Pass;\n      var html = inner.mode.configuration == \"html\";\n      var dontCloseTags = typeof opt == \"object\" && opt.dontCloseTags || html && htmlDontClose;\n      var indentTags = typeof opt == \"object\" && opt.indentTags || html && htmlIndent;\n      if (tok.end > pos.ch) tagName = tagName.slice(0, tagName.length - tok.end + pos.ch);\n      var lowerTagName = tagName.toLowerCase(); // Don't process the '>' at the end of an end-tag or self-closing tag\n\n      if (!tagName || tok.type == \"string\" && (tok.end != pos.ch || !/[\\\"\\']/.test(tok.string.charAt(tok.string.length - 1)) || tok.string.length == 1) || tok.type == \"tag\" && tagInfo.close || tok.string.indexOf(\"/\") == pos.ch - tok.start - 1 || // match something like <someTagName />\n      dontCloseTags && indexOf(dontCloseTags, lowerTagName) > -1 || closingTagExists(cm, inner.mode.xmlCurrentContext && inner.mode.xmlCurrentContext(state) || [], tagName, pos, true)) return CodeMirror.Pass;\n      var emptyTags = typeof opt == \"object\" && opt.emptyTags;\n\n      if (emptyTags && indexOf(emptyTags, tagName) > -1) {\n        replacements[i] = {\n          text: \"/>\",\n          newPos: CodeMirror.Pos(pos.line, pos.ch + 2)\n        };\n        continue;\n      }\n\n      var indent = indentTags && indexOf(indentTags, lowerTagName) > -1;\n      replacements[i] = {\n        indent: indent,\n        text: \">\" + (indent ? \"\\n\\n\" : \"\") + \"</\" + tagName + \">\",\n        newPos: indent ? CodeMirror.Pos(pos.line + 1, 0) : CodeMirror.Pos(pos.line, pos.ch + 1)\n      };\n    }\n\n    var dontIndentOnAutoClose = typeof opt == \"object\" && opt.dontIndentOnAutoClose;\n\n    for (var i = ranges.length - 1; i >= 0; i--) {\n      var info = replacements[i];\n      cm.replaceRange(info.text, ranges[i].head, ranges[i].anchor, \"+insert\");\n      var sel = cm.listSelections().slice(0);\n      sel[i] = {\n        head: info.newPos,\n        anchor: info.newPos\n      };\n      cm.setSelections(sel);\n\n      if (!dontIndentOnAutoClose && info.indent) {\n        cm.indentLine(info.newPos.line, null, true);\n        cm.indentLine(info.newPos.line + 1, null, true);\n      }\n    }\n  }\n\n  function autoCloseCurrent(cm, typingSlash) {\n    var ranges = cm.listSelections(),\n        replacements = [];\n    var head = typingSlash ? \"/\" : \"</\";\n    var opt = cm.getOption(\"autoCloseTags\");\n    var dontIndentOnAutoClose = typeof opt == \"object\" && opt.dontIndentOnSlash;\n\n    for (var i = 0; i < ranges.length; i++) {\n      if (!ranges[i].empty()) return CodeMirror.Pass;\n      var pos = ranges[i].head,\n          tok = cm.getTokenAt(pos);\n      var inner = CodeMirror.innerMode(cm.getMode(), tok.state),\n          state = inner.state;\n      if (typingSlash && (tok.type == \"string\" || tok.string.charAt(0) != \"<\" || tok.start != pos.ch - 1)) return CodeMirror.Pass; // Kludge to get around the fact that we are not in XML mode\n      // when completing in JS/CSS snippet in htmlmixed mode. Does not\n      // work for other XML embedded languages (there is no general\n      // way to go from a mixed mode to its current XML state).\n\n      var replacement,\n          mixed = inner.mode.name != \"xml\" && cm.getMode().name == \"htmlmixed\";\n\n      if (mixed && inner.mode.name == \"javascript\") {\n        replacement = head + \"script\";\n      } else if (mixed && inner.mode.name == \"css\") {\n        replacement = head + \"style\";\n      } else {\n        var context = inner.mode.xmlCurrentContext && inner.mode.xmlCurrentContext(state);\n        var top = context.length ? context[context.length - 1] : \"\";\n        if (!context || context.length && closingTagExists(cm, context, top, pos)) return CodeMirror.Pass;\n        replacement = head + top;\n      }\n\n      if (cm.getLine(pos.line).charAt(tok.end) != \">\") replacement += \">\";\n      replacements[i] = replacement;\n    }\n\n    cm.replaceSelections(replacements);\n    ranges = cm.listSelections();\n\n    if (!dontIndentOnAutoClose) {\n      for (var i = 0; i < ranges.length; i++) {\n        if (i == ranges.length - 1 || ranges[i].head.line < ranges[i + 1].head.line) cm.indentLine(ranges[i].head.line);\n      }\n    }\n  }\n\n  function autoCloseSlash(cm) {\n    if (cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n    return autoCloseCurrent(cm, true);\n  }\n\n  CodeMirror.commands.closeTag = function (cm) {\n    return autoCloseCurrent(cm);\n  };\n\n  function indexOf(collection, elt) {\n    if (collection.indexOf) return collection.indexOf(elt);\n\n    for (var i = 0, e = collection.length; i < e; ++i) {\n      if (collection[i] == elt) return i;\n    }\n\n    return -1;\n  } // If xml-fold is loaded, we use its functionality to try and verify\n  // whether a given tag is actually unclosed.\n\n\n  function closingTagExists(cm, context, tagName, pos, newTag) {\n    if (!CodeMirror.scanForClosingTag) return false;\n    var end = Math.min(cm.lastLine() + 1, pos.line + 500);\n    var nextClose = CodeMirror.scanForClosingTag(cm, pos, null, end);\n    if (!nextClose || nextClose.tag != tagName) return false; // If the immediate wrapping context contains onCx instances of\n    // the same tag, a closing tag only exists if there are at least\n    // that many closing tags of that type following.\n\n    var onCx = newTag ? 1 : 0;\n\n    for (var i = context.length - 1; i >= 0; i--) {\n      if (context[i] == tagName) ++onCx;else break;\n    }\n\n    pos = nextClose.to;\n\n    for (var i = 1; i < onCx; i++) {\n      var next = CodeMirror.scanForClosingTag(cm, pos, null, end);\n      if (!next || next.tag != tagName) return false;\n      pos = next.to;\n    }\n\n    return true;\n  }\n});","map":null,"metadata":{},"sourceType":"script"}