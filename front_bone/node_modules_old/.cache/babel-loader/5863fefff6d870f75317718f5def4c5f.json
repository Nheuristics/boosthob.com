{"ast":null,"code":"import _defineProperty from \"/home/ayaz/Projects/boosthub.com/front_bone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/ayaz/Projects/boosthub.com/front_bone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _assertThisInitialized from \"/home/ayaz/Projects/boosthub.com/front_bone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _possibleConstructorReturn from \"/home/ayaz/Projects/boosthub.com/front_bone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/ayaz/Projects/boosthub.com/front_bone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/ayaz/Projects/boosthub.com/front_bone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _classCallCheck from \"/home/ayaz/Projects/boosthub.com/front_bone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ayaz/Projects/boosthub.com/front_bone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { NodeProp, Tree, IterMode, TreeFragment, Parser, NodeType, NodeSet } from '@lezer/common';\nimport { StateEffect, StateField, Facet, EditorState, countColumn as _countColumn, combineConfig, RangeSet, RangeSetBuilder, Prec } from '@codemirror/state';\nimport { ViewPlugin, logException, Decoration, EditorView, WidgetType, gutter, GutterMarker } from '@codemirror/view';\nimport { tags, tagHighlighter, highlightTree, styleTags } from '@lezer/highlight';\nimport { StyleModule } from 'style-mod';\n\nvar _a;\n/**\nNode prop stored in a parser's top syntax node to provide the\nfacet that stores language-specific data for that language.\n*/\n\n\nvar languageDataProp = /*@__PURE__*/new NodeProp();\n/**\nHelper function to define a facet (to be added to the top syntax\nnode(s) for a language via\n[`languageDataProp`](https://codemirror.net/6/docs/ref/#language.languageDataProp)), that will be\nused to associate language data with the language. You\nprobably only need this when subclassing\n[`Language`](https://codemirror.net/6/docs/ref/#language.Language).\n*/\n\nfunction defineLanguageFacet(baseData) {\n  return Facet.define({\n    combine: baseData ? function (values) {\n      return values.concat(baseData);\n    } : undefined\n  });\n}\n/**\nA language object manages parsing and per-language\n[metadata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt). Parse data is\nmanaged as a [Lezer](https://lezer.codemirror.net) tree. The class\ncan be used directly, via the [`LRLanguage`](https://codemirror.net/6/docs/ref/#language.LRLanguage)\nsubclass for [Lezer](https://lezer.codemirror.net/) LR parsers, or\nvia the [`StreamLanguage`](https://codemirror.net/6/docs/ref/#language.StreamLanguage) subclass\nfor stream parsers.\n*/\n\n\nvar Language = /*#__PURE__*/function () {\n  /**\n  Construct a language object. If you need to invoke this\n  directly, first define a data facet with\n  [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet), and then\n  configure your parser to [attach](https://codemirror.net/6/docs/ref/#language.languageDataProp) it\n  to the language's outer syntax node.\n  */\n  function Language(\n  /**\n  The [language data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) facet\n  used for this language.\n  */\n  data, parser) {\n    var extraExtensions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n    _classCallCheck(this, Language);\n\n    this.data = data; // Kludge to define EditorState.tree as a debugging helper,\n    // without the EditorState package actually knowing about\n    // languages and lezer trees.\n\n    if (!EditorState.prototype.hasOwnProperty(\"tree\")) Object.defineProperty(EditorState.prototype, \"tree\", {\n      get: function get() {\n        return syntaxTree(this);\n      }\n    });\n    this.parser = parser;\n    this.extension = [language.of(this), EditorState.languageData.of(function (state, pos, side) {\n      return state.facet(languageDataFacetAt(state, pos, side));\n    })].concat(extraExtensions);\n  }\n  /**\n  Query whether this language is active at the given position.\n  */\n\n\n  _createClass(Language, [{\n    key: \"isActiveAt\",\n    value: function isActiveAt(state, pos) {\n      var side = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n      return languageDataFacetAt(state, pos, side) == this.data;\n    }\n    /**\n    Find the document regions that were parsed using this language.\n    The returned regions will _include_ any nested languages rooted\n    in this language, when those exist.\n    */\n\n  }, {\n    key: \"findRegions\",\n    value: function findRegions(state) {\n      var _this = this;\n\n      var lang = state.facet(language);\n      if ((lang === null || lang === void 0 ? void 0 : lang.data) == this.data) return [{\n        from: 0,\n        to: state.doc.length\n      }];\n      if (!lang || !lang.allowsNesting) return [];\n      var result = [];\n\n      var explore = function explore(tree, from) {\n        if (tree.prop(languageDataProp) == _this.data) {\n          result.push({\n            from: from,\n            to: from + tree.length\n          });\n          return;\n        }\n\n        var mount = tree.prop(NodeProp.mounted);\n\n        if (mount) {\n          if (mount.tree.prop(languageDataProp) == _this.data) {\n            if (mount.overlay) {\n              var _iterator = _createForOfIteratorHelper(mount.overlay),\n                  _step;\n\n              try {\n                for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                  var r = _step.value;\n                  result.push({\n                    from: r.from + from,\n                    to: r.to + from\n                  });\n                }\n              } catch (err) {\n                _iterator.e(err);\n              } finally {\n                _iterator.f();\n              }\n            } else result.push({\n              from: from,\n              to: from + tree.length\n            });\n\n            return;\n          } else if (mount.overlay) {\n            var size = result.length;\n            explore(mount.tree, mount.overlay[0].from + from);\n            if (result.length > size) return;\n          }\n        }\n\n        for (var i = 0; i < tree.children.length; i++) {\n          var ch = tree.children[i];\n          if (ch instanceof Tree) explore(ch, tree.positions[i] + from);\n        }\n      };\n\n      explore(syntaxTree(state), 0);\n      return result;\n    }\n    /**\n    Indicates whether this language allows nested languages. The\n    default implementation returns true.\n    */\n\n  }, {\n    key: \"allowsNesting\",\n    get: function get() {\n      return true;\n    }\n  }]);\n\n  return Language;\n}();\n/**\n@internal\n*/\n\n\nLanguage.setState = /*@__PURE__*/StateEffect.define();\n\nfunction languageDataFacetAt(state, pos, side) {\n  var topLang = state.facet(language);\n  if (!topLang) return null;\n  var facet = topLang.data;\n\n  if (topLang.allowsNesting) {\n    for (var node = syntaxTree(state).topNode; node; node = node.enter(pos, side, IterMode.ExcludeBuffers)) {\n      facet = node.type.prop(languageDataProp) || facet;\n    }\n  }\n\n  return facet;\n}\n/**\nA subclass of [`Language`](https://codemirror.net/6/docs/ref/#language.Language) for use with Lezer\n[LR parsers](https://lezer.codemirror.net/docs/ref#lr.LRParser)\nparsers.\n*/\n\n\nvar LRLanguage = /*#__PURE__*/function (_Language) {\n  _inherits(LRLanguage, _Language);\n\n  function LRLanguage(data, parser) {\n    var _this2;\n\n    _classCallCheck(this, LRLanguage);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(LRLanguage).call(this, data, parser));\n    _this2.parser = parser;\n    return _this2;\n  }\n  /**\n  Define a language from a parser.\n  */\n\n\n  _createClass(LRLanguage, [{\n    key: \"configure\",\n\n    /**\n    Create a new instance of this language with a reconfigured\n    version of its parser.\n    */\n    value: function configure(options) {\n      return new LRLanguage(this.data, this.parser.configure(options));\n    }\n  }, {\n    key: \"allowsNesting\",\n    get: function get() {\n      return this.parser.hasWrappers();\n    }\n  }], [{\n    key: \"define\",\n    value: function define(spec) {\n      var data = defineLanguageFacet(spec.languageData);\n      return new LRLanguage(data, spec.parser.configure({\n        props: [languageDataProp.add(function (type) {\n          return type.isTop ? data : undefined;\n        })]\n      }));\n    }\n  }]);\n\n  return LRLanguage;\n}(Language);\n/**\nGet the syntax tree for a state, which is the current (possibly\nincomplete) parse tree of the active\n[language](https://codemirror.net/6/docs/ref/#language.Language), or the empty tree if there is no\nlanguage available.\n*/\n\n\nfunction syntaxTree(state) {\n  var field = state.field(Language.state, false);\n  return field ? field.tree : Tree.empty;\n}\n/**\nTry to get a parse tree that spans at least up to `upto`. The\nmethod will do at most `timeout` milliseconds of work to parse\nup to that point if the tree isn't already available.\n*/\n\n\nfunction ensureSyntaxTree(state, upto) {\n  var timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 50;\n\n  var _a;\n\n  var parse = (_a = state.field(Language.state, false)) === null || _a === void 0 ? void 0 : _a.context;\n  return !parse ? null : parse.isDone(upto) || parse.work(timeout, upto) ? parse.tree : null;\n}\n/**\nQueries whether there is a full syntax tree available up to the\ngiven document position. If there isn't, the background parse\nprocess _might_ still be working and update the tree further, but\nthere is no guarantee of that—the parser will [stop\nworking](https://codemirror.net/6/docs/ref/#language.syntaxParserRunning) when it has spent a\ncertain amount of time or has moved beyond the visible viewport.\nAlways returns false if no language has been enabled.\n*/\n\n\nfunction syntaxTreeAvailable(state) {\n  var upto = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : state.doc.length;\n\n  var _a;\n\n  return ((_a = state.field(Language.state, false)) === null || _a === void 0 ? void 0 : _a.context.isDone(upto)) || false;\n}\n/**\nMove parsing forward, and update the editor state afterwards to\nreflect the new tree. Will work for at most `timeout`\nmilliseconds. Returns true if the parser managed get to the given\nposition in that time.\n*/\n\n\nfunction forceParsing(view) {\n  var upto = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : view.viewport.to;\n  var timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 100;\n  var success = ensureSyntaxTree(view.state, upto, timeout);\n  if (success != syntaxTree(view.state)) view.dispatch({});\n  return !!success;\n}\n/**\nTells you whether the language parser is planning to do more\nparsing work (in a `requestIdleCallback` pseudo-thread) or has\nstopped running, either because it parsed the entire document,\nbecause it spent too much time and was cut off, or because there\nis no language parser enabled.\n*/\n\n\nfunction syntaxParserRunning(view) {\n  var _a;\n\n  return ((_a = view.plugin(parseWorker)) === null || _a === void 0 ? void 0 : _a.isWorking()) || false;\n} // Lezer-style Input object for a Text document.\n\n\nvar DocInput = /*#__PURE__*/function () {\n  function DocInput(doc) {\n    var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : doc.length;\n\n    _classCallCheck(this, DocInput);\n\n    this.doc = doc;\n    this.length = length;\n    this.cursorPos = 0;\n    this.string = \"\";\n    this.cursor = doc.iter();\n  }\n\n  _createClass(DocInput, [{\n    key: \"syncTo\",\n    value: function syncTo(pos) {\n      this.string = this.cursor.next(pos - this.cursorPos).value;\n      this.cursorPos = pos + this.string.length;\n      return this.cursorPos - this.string.length;\n    }\n  }, {\n    key: \"chunk\",\n    value: function chunk(pos) {\n      this.syncTo(pos);\n      return this.string;\n    }\n  }, {\n    key: \"read\",\n    value: function read(from, to) {\n      var stringStart = this.cursorPos - this.string.length;\n      if (from < stringStart || to >= this.cursorPos) return this.doc.sliceString(from, to);else return this.string.slice(from - stringStart, to - stringStart);\n    }\n  }, {\n    key: \"lineChunks\",\n    get: function get() {\n      return true;\n    }\n  }]);\n\n  return DocInput;\n}();\n\nvar currentContext = null;\n/**\nA parse context provided to parsers working on the editor content.\n*/\n\nvar ParseContext = /*#__PURE__*/function () {\n  function ParseContext(parser,\n  /**\n  The current editor state.\n  */\n  state) {\n    var fragments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    var\n    /**\n    @internal\n    */\n    tree = arguments.length > 3 ? arguments[3] : undefined;\n    var\n    /**\n    @internal\n    */\n    treeLen = arguments.length > 4 ? arguments[4] : undefined;\n    var\n    /**\n    The current editor viewport (or some overapproximation\n    thereof). Intended to be used for opportunistically avoiding\n    work (in which case\n    [`skipUntilInView`](https://codemirror.net/6/docs/ref/#language.ParseContext.skipUntilInView)\n    should be called to make sure the parser is restarted when the\n    skipped region becomes visible).\n    */\n    viewport = arguments.length > 5 ? arguments[5] : undefined;\n    var\n    /**\n    @internal\n    */\n    skipped = arguments.length > 6 ? arguments[6] : undefined;\n    var\n    /**\n    This is where skipping parsers can register a promise that,\n    when resolved, will schedule a new parse. It is cleared when\n    the parse worker picks up the promise. @internal\n    */\n    scheduleOn = arguments.length > 7 ? arguments[7] : undefined;\n\n    _classCallCheck(this, ParseContext);\n\n    this.parser = parser;\n    this.state = state;\n    this.fragments = fragments;\n    this.tree = tree;\n    this.treeLen = treeLen;\n    this.viewport = viewport;\n    this.skipped = skipped;\n    this.scheduleOn = scheduleOn;\n    this.parse = null;\n    /**\n    @internal\n    */\n\n    this.tempSkipped = [];\n  }\n  /**\n  @internal\n  */\n\n\n  _createClass(ParseContext, [{\n    key: \"startParse\",\n    value: function startParse() {\n      return this.parser.startParse(new DocInput(this.state.doc), this.fragments);\n    }\n    /**\n    @internal\n    */\n\n  }, {\n    key: \"work\",\n    value: function work(until, upto) {\n      var _this3 = this;\n\n      if (upto != null && upto >= this.state.doc.length) upto = undefined;\n\n      if (this.tree != Tree.empty && this.isDone(upto !== null && upto !== void 0 ? upto : this.state.doc.length)) {\n        this.takeTree();\n        return true;\n      }\n\n      return this.withContext(function () {\n        var _a;\n\n        if (typeof until == \"number\") {\n          var endTime = Date.now() + until;\n\n          until = function until() {\n            return Date.now() > endTime;\n          };\n        }\n\n        if (!_this3.parse) _this3.parse = _this3.startParse();\n        if (upto != null && (_this3.parse.stoppedAt == null || _this3.parse.stoppedAt > upto) && upto < _this3.state.doc.length) _this3.parse.stopAt(upto);\n\n        for (;;) {\n          var done = _this3.parse.advance();\n\n          if (done) {\n            _this3.fragments = _this3.withoutTempSkipped(TreeFragment.addTree(done, _this3.fragments, _this3.parse.stoppedAt != null));\n            _this3.treeLen = (_a = _this3.parse.stoppedAt) !== null && _a !== void 0 ? _a : _this3.state.doc.length;\n            _this3.tree = done;\n            _this3.parse = null;\n            if (_this3.treeLen < (upto !== null && upto !== void 0 ? upto : _this3.state.doc.length)) _this3.parse = _this3.startParse();else return true;\n          }\n\n          if (until()) return false;\n        }\n      });\n    }\n    /**\n    @internal\n    */\n\n  }, {\n    key: \"takeTree\",\n    value: function takeTree() {\n      var _this4 = this;\n\n      var pos, tree;\n\n      if (this.parse && (pos = this.parse.parsedPos) >= this.treeLen) {\n        if (this.parse.stoppedAt == null || this.parse.stoppedAt > pos) this.parse.stopAt(pos);\n        this.withContext(function () {\n          while (!(tree = _this4.parse.advance())) {}\n        });\n        this.treeLen = pos;\n        this.tree = tree;\n        this.fragments = this.withoutTempSkipped(TreeFragment.addTree(this.tree, this.fragments, true));\n        this.parse = null;\n      }\n    }\n  }, {\n    key: \"withContext\",\n    value: function withContext(f) {\n      var prev = currentContext;\n      currentContext = this;\n\n      try {\n        return f();\n      } finally {\n        currentContext = prev;\n      }\n    }\n  }, {\n    key: \"withoutTempSkipped\",\n    value: function withoutTempSkipped(fragments) {\n      for (var r; r = this.tempSkipped.pop();) {\n        fragments = cutFragments(fragments, r.from, r.to);\n      }\n\n      return fragments;\n    }\n    /**\n    @internal\n    */\n\n  }, {\n    key: \"changes\",\n    value: function changes(_changes, newState) {\n      var fragments = this.fragments,\n          tree = this.tree,\n          treeLen = this.treeLen,\n          viewport = this.viewport,\n          skipped = this.skipped;\n      this.takeTree();\n\n      if (!_changes.empty) {\n        var ranges = [];\n\n        _changes.iterChangedRanges(function (fromA, toA, fromB, toB) {\n          return ranges.push({\n            fromA: fromA,\n            toA: toA,\n            fromB: fromB,\n            toB: toB\n          });\n        });\n\n        fragments = TreeFragment.applyChanges(fragments, ranges);\n        tree = Tree.empty;\n        treeLen = 0;\n        viewport = {\n          from: _changes.mapPos(viewport.from, -1),\n          to: _changes.mapPos(viewport.to, 1)\n        };\n\n        if (this.skipped.length) {\n          skipped = [];\n\n          var _iterator2 = _createForOfIteratorHelper(this.skipped),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var r = _step2.value;\n\n              var from = _changes.mapPos(r.from, 1),\n                  to = _changes.mapPos(r.to, -1);\n\n              if (from < to) skipped.push({\n                from: from,\n                to: to\n              });\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        }\n      }\n\n      return new ParseContext(this.parser, newState, fragments, tree, treeLen, viewport, skipped, this.scheduleOn);\n    }\n    /**\n    @internal\n    */\n\n  }, {\n    key: \"updateViewport\",\n    value: function updateViewport(viewport) {\n      if (this.viewport.from == viewport.from && this.viewport.to == viewport.to) return false;\n      this.viewport = viewport;\n      var startLen = this.skipped.length;\n\n      for (var i = 0; i < this.skipped.length; i++) {\n        var _this$skipped$i = this.skipped[i],\n            from = _this$skipped$i.from,\n            to = _this$skipped$i.to;\n\n        if (from < viewport.to && to > viewport.from) {\n          this.fragments = cutFragments(this.fragments, from, to);\n          this.skipped.splice(i--, 1);\n        }\n      }\n\n      if (this.skipped.length >= startLen) return false;\n      this.reset();\n      return true;\n    }\n    /**\n    @internal\n    */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      if (this.parse) {\n        this.takeTree();\n        this.parse = null;\n      }\n    }\n    /**\n    Notify the parse scheduler that the given region was skipped\n    because it wasn't in view, and the parse should be restarted\n    when it comes into view.\n    */\n\n  }, {\n    key: \"skipUntilInView\",\n    value: function skipUntilInView(from, to) {\n      this.skipped.push({\n        from: from,\n        to: to\n      });\n    }\n    /**\n    Returns a parser intended to be used as placeholder when\n    asynchronously loading a nested parser. It'll skip its input and\n    mark it as not-really-parsed, so that the next update will parse\n    it again.\n    \n    When `until` is given, a reparse will be scheduled when that\n    promise resolves.\n    */\n\n  }, {\n    key: \"isDone\",\n\n    /**\n    @internal\n    */\n    value: function isDone(upto) {\n      upto = Math.min(upto, this.state.doc.length);\n      var frags = this.fragments;\n      return this.treeLen >= upto && frags.length && frags[0].from == 0 && frags[0].to >= upto;\n    }\n    /**\n    Get the context for the current parse, or `null` if no editor\n    parse is in progress.\n    */\n\n  }], [{\n    key: \"create\",\n    value: function create(parser, state, viewport) {\n      return new ParseContext(parser, state, [], Tree.empty, 0, viewport, [], null);\n    }\n  }, {\n    key: \"getSkippingParser\",\n    value: function getSkippingParser(until) {\n      return new ( /*#__PURE__*/function (_Parser) {\n        _inherits(_class, _Parser);\n\n        function _class() {\n          _classCallCheck(this, _class);\n\n          return _possibleConstructorReturn(this, _getPrototypeOf(_class).apply(this, arguments));\n        }\n\n        _createClass(_class, [{\n          key: \"createParse\",\n          value: function createParse(input, fragments, ranges) {\n            var from = ranges[0].from,\n                to = ranges[ranges.length - 1].to;\n            var parser = {\n              parsedPos: from,\n              advance: function advance() {\n                var cx = currentContext;\n\n                if (cx) {\n                  var _iterator3 = _createForOfIteratorHelper(ranges),\n                      _step3;\n\n                  try {\n                    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                      var r = _step3.value;\n                      cx.tempSkipped.push(r);\n                    }\n                  } catch (err) {\n                    _iterator3.e(err);\n                  } finally {\n                    _iterator3.f();\n                  }\n\n                  if (until) cx.scheduleOn = cx.scheduleOn ? Promise.all([cx.scheduleOn, until]) : until;\n                }\n\n                this.parsedPos = to;\n                return new Tree(NodeType.none, [], [], to - from);\n              },\n              stoppedAt: null,\n              stopAt: function stopAt() {}\n            };\n            return parser;\n          }\n        }]);\n\n        return _class;\n      }(Parser))();\n    }\n  }, {\n    key: \"get\",\n    value: function get() {\n      return currentContext;\n    }\n  }]);\n\n  return ParseContext;\n}();\n\nfunction cutFragments(fragments, from, to) {\n  return TreeFragment.applyChanges(fragments, [{\n    fromA: from,\n    toA: to,\n    fromB: from,\n    toB: to\n  }]);\n}\n\nvar LanguageState = /*#__PURE__*/function () {\n  function LanguageState( // A mutable parse state that is used to preserve work done during\n  // the lifetime of a state when moving to the next state.\n  context) {\n    _classCallCheck(this, LanguageState);\n\n    this.context = context;\n    this.tree = context.tree;\n  }\n\n  _createClass(LanguageState, [{\n    key: \"apply\",\n    value: function apply(tr) {\n      if (!tr.docChanged && this.tree == this.context.tree) return this;\n      var newCx = this.context.changes(tr.changes, tr.state); // If the previous parse wasn't done, go forward only up to its\n      // end position or the end of the viewport, to avoid slowing down\n      // state updates with parse work beyond the viewport.\n\n      var upto = this.context.treeLen == tr.startState.doc.length ? undefined : Math.max(tr.changes.mapPos(this.context.treeLen), newCx.viewport.to);\n      if (!newCx.work(20\n      /* Apply */\n      , upto)) newCx.takeTree();\n      return new LanguageState(newCx);\n    }\n  }], [{\n    key: \"init\",\n    value: function init(state) {\n      var vpTo = Math.min(3000\n      /* InitViewport */\n      , state.doc.length);\n      var parseState = ParseContext.create(state.facet(language).parser, state, {\n        from: 0,\n        to: vpTo\n      });\n      if (!parseState.work(20\n      /* Apply */\n      , vpTo)) parseState.takeTree();\n      return new LanguageState(parseState);\n    }\n  }]);\n\n  return LanguageState;\n}();\n\nLanguage.state = /*@__PURE__*/StateField.define({\n  create: LanguageState.init,\n  update: function update(value, tr) {\n    var _iterator4 = _createForOfIteratorHelper(tr.effects),\n        _step4;\n\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var e = _step4.value;\n        if (e.is(Language.setState)) return e.value;\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n\n    if (tr.startState.facet(language) != tr.state.facet(language)) return LanguageState.init(tr.state);\n    return value.apply(tr);\n  }\n});\n\nvar requestIdle = function requestIdle(callback) {\n  var timeout = setTimeout(function () {\n    return callback();\n  }, 500\n  /* MaxPause */\n  );\n  return function () {\n    return clearTimeout(timeout);\n  };\n};\n\nif (typeof requestIdleCallback != \"undefined\") requestIdle = function requestIdle(callback) {\n  var idle = -1,\n      timeout = setTimeout(function () {\n    idle = requestIdleCallback(callback, {\n      timeout: 500\n      /* MaxPause */\n      - 100\n      /* MinPause */\n\n    });\n  }, 100\n  /* MinPause */\n  );\n  return function () {\n    return idle < 0 ? clearTimeout(timeout) : cancelIdleCallback(idle);\n  };\n};\nvar isInputPending = typeof navigator != \"undefined\" && ((_a = navigator.scheduling) === null || _a === void 0 ? void 0 : _a.isInputPending) ? function () {\n  return navigator.scheduling.isInputPending();\n} : null;\nvar parseWorker = /*@__PURE__*/ViewPlugin.fromClass( /*#__PURE__*/function () {\n  function ParseWorker(view) {\n    _classCallCheck(this, ParseWorker);\n\n    this.view = view;\n    this.working = null;\n    this.workScheduled = 0; // End of the current time chunk\n\n    this.chunkEnd = -1; // Milliseconds of budget left for this chunk\n\n    this.chunkBudget = -1;\n    this.work = this.work.bind(this);\n    this.scheduleWork();\n  }\n\n  _createClass(ParseWorker, [{\n    key: \"update\",\n    value: function update(_update) {\n      var cx = this.view.state.field(Language.state).context;\n      if (cx.updateViewport(_update.view.viewport) || this.view.viewport.to > cx.treeLen) this.scheduleWork();\n\n      if (_update.docChanged) {\n        if (this.view.hasFocus) this.chunkBudget += 50\n        /* ChangeBonus */\n        ;\n        this.scheduleWork();\n      }\n\n      this.checkAsyncSchedule(cx);\n    }\n  }, {\n    key: \"scheduleWork\",\n    value: function scheduleWork() {\n      if (this.working) return;\n      var state = this.view.state,\n          field = state.field(Language.state);\n      if (field.tree != field.context.tree || !field.context.isDone(state.doc.length)) this.working = requestIdle(this.work);\n    }\n  }, {\n    key: \"work\",\n    value: function work(deadline) {\n      this.working = null;\n      var now = Date.now();\n\n      if (this.chunkEnd < now && (this.chunkEnd < 0 || this.view.hasFocus)) {\n        // Start a new chunk\n        this.chunkEnd = now + 30000\n        /* ChunkTime */\n        ;\n        this.chunkBudget = 3000\n        /* ChunkBudget */\n        ;\n      }\n\n      if (this.chunkBudget <= 0) return; // No more budget\n\n      var _this$view = this.view,\n          state = _this$view.state,\n          vpTo = _this$view.viewport.to,\n          field = state.field(Language.state);\n      if (field.tree == field.context.tree && field.context.isDone(vpTo + 100000\n      /* MaxParseAhead */\n      )) return;\n      var endTime = Date.now() + Math.min(this.chunkBudget, 100\n      /* Slice */\n      , deadline && !isInputPending ? Math.max(25\n      /* MinSlice */\n      , deadline.timeRemaining() - 5) : 1e9);\n      var viewportFirst = field.context.treeLen < vpTo && state.doc.length > vpTo + 1000;\n      var done = field.context.work(function () {\n        return isInputPending && isInputPending() || Date.now() > endTime;\n      }, vpTo + (viewportFirst ? 0 : 100000\n      /* MaxParseAhead */\n      ));\n      this.chunkBudget -= Date.now() - now;\n\n      if (done || this.chunkBudget <= 0) {\n        field.context.takeTree();\n        this.view.dispatch({\n          effects: Language.setState.of(new LanguageState(field.context))\n        });\n      }\n\n      if (this.chunkBudget > 0 && !(done && !viewportFirst)) this.scheduleWork();\n      this.checkAsyncSchedule(field.context);\n    }\n  }, {\n    key: \"checkAsyncSchedule\",\n    value: function checkAsyncSchedule(cx) {\n      var _this5 = this;\n\n      if (cx.scheduleOn) {\n        this.workScheduled++;\n        cx.scheduleOn.then(function () {\n          return _this5.scheduleWork();\n        }).catch(function (err) {\n          return logException(_this5.view.state, err);\n        }).then(function () {\n          return _this5.workScheduled--;\n        });\n        cx.scheduleOn = null;\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.working) this.working();\n    }\n  }, {\n    key: \"isWorking\",\n    value: function isWorking() {\n      return !!(this.working || this.workScheduled > 0);\n    }\n  }]);\n\n  return ParseWorker;\n}(), {\n  eventHandlers: {\n    focus: function focus() {\n      this.scheduleWork();\n    }\n  }\n});\n/**\nThe facet used to associate a language with an editor state. Used\nby `Language` object's `extension` property (so you don't need to\nmanually wrap your languages in this). Can be used to access the\ncurrent language on a state.\n*/\n\nvar language = /*@__PURE__*/Facet.define({\n  combine: function combine(languages) {\n    return languages.length ? languages[0] : null;\n  },\n  enables: [Language.state, parseWorker]\n});\n/**\nThis class bundles a [language](https://codemirror.net/6/docs/ref/#language.Language) with an\noptional set of supporting extensions. Language packages are\nencouraged to export a function that optionally takes a\nconfiguration object and returns a `LanguageSupport` instance, as\nthe main way for client code to use the package.\n*/\n\nvar LanguageSupport =\n/**\nCreate a language support object.\n*/\nfunction LanguageSupport(\n/**\nThe language object.\n*/\nlanguage) {\n  var support = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  _classCallCheck(this, LanguageSupport);\n\n  this.language = language;\n  this.support = support;\n  this.extension = [language, support];\n};\n/**\nLanguage descriptions are used to store metadata about languages\nand to dynamically load them. Their main role is finding the\nappropriate language for a filename or dynamically loading nested\nparsers.\n*/\n\n\nvar LanguageDescription = /*#__PURE__*/function () {\n  function LanguageDescription(\n  /**\n  The name of this language.\n  */\n  name,\n  /**\n  Alternative names for the mode (lowercased, includes `this.name`).\n  */\n  alias,\n  /**\n  File extensions associated with this language.\n  */\n  extensions,\n  /**\n  Optional filename pattern that should be associated with this\n  language.\n  */\n  filename, loadFunc) {\n    var support = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;\n\n    _classCallCheck(this, LanguageDescription);\n\n    this.name = name;\n    this.alias = alias;\n    this.extensions = extensions;\n    this.filename = filename;\n    this.loadFunc = loadFunc;\n    this.support = support;\n    this.loading = null;\n  }\n  /**\n  Start loading the the language. Will return a promise that\n  resolves to a [`LanguageSupport`](https://codemirror.net/6/docs/ref/#language.LanguageSupport)\n  object when the language successfully loads.\n  */\n\n\n  _createClass(LanguageDescription, [{\n    key: \"load\",\n    value: function load() {\n      var _this6 = this;\n\n      return this.loading || (this.loading = this.loadFunc().then(function (support) {\n        return _this6.support = support;\n      }, function (err) {\n        _this6.loading = null;\n        throw err;\n      }));\n    }\n    /**\n    Create a language description.\n    */\n\n  }], [{\n    key: \"of\",\n    value: function of(spec) {\n      var load = spec.load,\n          support = spec.support;\n\n      if (!load) {\n        if (!support) throw new RangeError(\"Must pass either 'load' or 'support' to LanguageDescription.of\");\n\n        load = function load() {\n          return Promise.resolve(support);\n        };\n      }\n\n      return new LanguageDescription(spec.name, (spec.alias || []).concat(spec.name).map(function (s) {\n        return s.toLowerCase();\n      }), spec.extensions || [], spec.filename, load, support);\n    }\n    /**\n    Look for a language in the given array of descriptions that\n    matches the filename. Will first match\n    [`filename`](https://codemirror.net/6/docs/ref/#language.LanguageDescription.filename) patterns,\n    and then [extensions](https://codemirror.net/6/docs/ref/#language.LanguageDescription.extensions),\n    and return the first language that matches.\n    */\n\n  }, {\n    key: \"matchFilename\",\n    value: function matchFilename(descs, filename) {\n      var _iterator5 = _createForOfIteratorHelper(descs),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var _d = _step5.value;\n          if (_d.filename && _d.filename.test(filename)) return _d;\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      var ext = /\\.([^.]+)$/.exec(filename);\n\n      if (ext) {\n        var _iterator6 = _createForOfIteratorHelper(descs),\n            _step6;\n\n        try {\n          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n            var d = _step6.value;\n            if (d.extensions.indexOf(ext[1]) > -1) return d;\n          }\n        } catch (err) {\n          _iterator6.e(err);\n        } finally {\n          _iterator6.f();\n        }\n      }\n\n      return null;\n    }\n    /**\n    Look for a language whose name or alias matches the the given\n    name (case-insensitively). If `fuzzy` is true, and no direct\n    matchs is found, this'll also search for a language whose name\n    or alias occurs in the string (for names shorter than three\n    characters, only when surrounded by non-word characters).\n    */\n\n  }, {\n    key: \"matchLanguageName\",\n    value: function matchLanguageName(descs, name) {\n      var fuzzy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      name = name.toLowerCase();\n\n      var _iterator7 = _createForOfIteratorHelper(descs),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var _d2 = _step7.value;\n          if (_d2.alias.some(function (a) {\n            return a == name;\n          })) return _d2;\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n\n      if (fuzzy) {\n        var _iterator8 = _createForOfIteratorHelper(descs),\n            _step8;\n\n        try {\n          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n            var d = _step8.value;\n\n            var _iterator9 = _createForOfIteratorHelper(d.alias),\n                _step9;\n\n            try {\n              for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n                var a = _step9.value;\n                var found = name.indexOf(a);\n                if (found > -1 && (a.length > 2 || !/\\w/.test(name[found - 1]) && !/\\w/.test(name[found + a.length]))) return d;\n              }\n            } catch (err) {\n              _iterator9.e(err);\n            } finally {\n              _iterator9.f();\n            }\n          }\n        } catch (err) {\n          _iterator8.e(err);\n        } finally {\n          _iterator8.f();\n        }\n      }\n\n      return null;\n    }\n  }]);\n\n  return LanguageDescription;\n}();\n/**\nFacet that defines a way to provide a function that computes the\nappropriate indentation depth at the start of a given line, or\n`null` to indicate no appropriate indentation could be determined.\n*/\n\n\nvar indentService = /*@__PURE__*/Facet.define();\n/**\nFacet for overriding the unit by which indentation happens.\nShould be a string consisting either entirely of spaces or\nentirely of tabs. When not set, this defaults to 2 spaces.\n*/\n\nvar indentUnit = /*@__PURE__*/Facet.define({\n  combine: function combine(values) {\n    if (!values.length) return \"  \";\n    if (!/^(?: +|\\t+)$/.test(values[0])) throw new Error(\"Invalid indent unit: \" + JSON.stringify(values[0]));\n    return values[0];\n  }\n});\n/**\nReturn the _column width_ of an indent unit in the state.\nDetermined by the [`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit)\nfacet, and [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) when that\ncontains tabs.\n*/\n\nfunction getIndentUnit(state) {\n  var unit = state.facet(indentUnit);\n  return unit.charCodeAt(0) == 9 ? state.tabSize * unit.length : unit.length;\n}\n/**\nCreate an indentation string that covers columns 0 to `cols`.\nWill use tabs for as much of the columns as possible when the\n[`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit) facet contains\ntabs.\n*/\n\n\nfunction indentString(state, cols) {\n  var result = \"\",\n      ts = state.tabSize;\n  if (state.facet(indentUnit).charCodeAt(0) == 9) while (cols >= ts) {\n    result += \"\\t\";\n    cols -= ts;\n  }\n\n  for (var i = 0; i < cols; i++) {\n    result += \" \";\n  }\n\n  return result;\n}\n/**\nGet the indentation at the given position. Will first consult any\n[indent services](https://codemirror.net/6/docs/ref/#language.indentService) that are registered,\nand if none of those return an indentation, this will check the\nsyntax tree for the [indent node prop](https://codemirror.net/6/docs/ref/#language.indentNodeProp)\nand use that if found. Returns a number when an indentation could\nbe determined, and null otherwise.\n*/\n\n\nfunction getIndentation(context, pos) {\n  if (context instanceof EditorState) context = new IndentContext(context);\n\n  var _iterator10 = _createForOfIteratorHelper(context.state.facet(indentService)),\n      _step10;\n\n  try {\n    for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n      var service = _step10.value;\n      var result = service(context, pos);\n      if (result != null) return result;\n    }\n  } catch (err) {\n    _iterator10.e(err);\n  } finally {\n    _iterator10.f();\n  }\n\n  var tree = syntaxTree(context.state);\n  return tree ? syntaxIndentation(context, tree, pos) : null;\n}\n/**\nCreate a change set that auto-indents all lines touched by the\ngiven document range.\n*/\n\n\nfunction indentRange(state, from, to) {\n  var updated = Object.create(null);\n  var context = new IndentContext(state, {\n    overrideIndentation: function overrideIndentation(start) {\n      var _a;\n\n      return (_a = updated[start]) !== null && _a !== void 0 ? _a : -1;\n    }\n  });\n  var changes = [];\n\n  for (var pos = from; pos <= to;) {\n    var line = state.doc.lineAt(pos);\n    pos = line.to + 1;\n    var indent = getIndentation(context, line.from);\n    if (indent == null) continue;\n    if (!/\\S/.test(line.text)) indent = 0;\n    var cur = /^\\s*/.exec(line.text)[0];\n    var norm = indentString(state, indent);\n\n    if (cur != norm) {\n      updated[line.from] = indent;\n      changes.push({\n        from: line.from,\n        to: line.from + cur.length,\n        insert: norm\n      });\n    }\n  }\n\n  return state.changes(changes);\n}\n/**\nIndentation contexts are used when calling [indentation\nservices](https://codemirror.net/6/docs/ref/#language.indentService). They provide helper utilities\nuseful in indentation logic, and can selectively override the\nindentation reported for some lines.\n*/\n\n\nvar IndentContext = /*#__PURE__*/function () {\n  /**\n  Create an indent context.\n  */\n  function IndentContext(\n  /**\n  The editor state.\n  */\n  state) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, IndentContext);\n\n    this.state = state;\n    this.options = options;\n    this.unit = getIndentUnit(state);\n  }\n  /**\n  Get a description of the line at the given position, taking\n  [simulated line\n  breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)\n  into account. If there is such a break at `pos`, the `bias`\n  argument determines whether the part of the line line before or\n  after the break is used.\n  */\n\n\n  _createClass(IndentContext, [{\n    key: \"lineAt\",\n    value: function lineAt(pos) {\n      var bias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var line = this.state.doc.lineAt(pos);\n      var _this$options = this.options,\n          simulateBreak = _this$options.simulateBreak,\n          simulateDoubleBreak = _this$options.simulateDoubleBreak;\n\n      if (simulateBreak != null && simulateBreak >= line.from && simulateBreak <= line.to) {\n        if (simulateDoubleBreak && simulateBreak == pos) return {\n          text: \"\",\n          from: pos\n        };else if (bias < 0 ? simulateBreak < pos : simulateBreak <= pos) return {\n          text: line.text.slice(simulateBreak - line.from),\n          from: simulateBreak\n        };else return {\n          text: line.text.slice(0, simulateBreak - line.from),\n          from: line.from\n        };\n      }\n\n      return line;\n    }\n    /**\n    Get the text directly after `pos`, either the entire line\n    or the next 100 characters, whichever is shorter.\n    */\n\n  }, {\n    key: \"textAfterPos\",\n    value: function textAfterPos(pos) {\n      var bias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      if (this.options.simulateDoubleBreak && pos == this.options.simulateBreak) return \"\";\n\n      var _this$lineAt = this.lineAt(pos, bias),\n          text = _this$lineAt.text,\n          from = _this$lineAt.from;\n\n      return text.slice(pos - from, Math.min(text.length, pos + 100 - from));\n    }\n    /**\n    Find the column for the given position.\n    */\n\n  }, {\n    key: \"column\",\n    value: function column(pos) {\n      var bias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\n      var _this$lineAt2 = this.lineAt(pos, bias),\n          text = _this$lineAt2.text,\n          from = _this$lineAt2.from;\n\n      var result = this.countColumn(text, pos - from);\n      var override = this.options.overrideIndentation ? this.options.overrideIndentation(from) : -1;\n      if (override > -1) result += override - this.countColumn(text, text.search(/\\S|$/));\n      return result;\n    }\n    /**\n    Find the column position (taking tabs into account) of the given\n    position in the given string.\n    */\n\n  }, {\n    key: \"countColumn\",\n    value: function countColumn(line) {\n      var pos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : line.length;\n      return _countColumn(line, this.state.tabSize, pos);\n    }\n    /**\n    Find the indentation column of the line at the given point.\n    */\n\n  }, {\n    key: \"lineIndent\",\n    value: function lineIndent(pos) {\n      var bias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\n      var _this$lineAt3 = this.lineAt(pos, bias),\n          text = _this$lineAt3.text,\n          from = _this$lineAt3.from;\n\n      var override = this.options.overrideIndentation;\n\n      if (override) {\n        var overriden = override(from);\n        if (overriden > -1) return overriden;\n      }\n\n      return this.countColumn(text, text.search(/\\S|$/));\n    }\n    /**\n    Returns the [simulated line\n    break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)\n    for this context, if any.\n    */\n\n  }, {\n    key: \"simulatedBreak\",\n    get: function get() {\n      return this.options.simulateBreak || null;\n    }\n  }]);\n\n  return IndentContext;\n}();\n/**\nA syntax tree node prop used to associate indentation strategies\nwith node types. Such a strategy is a function from an indentation\ncontext to a column number or null, where null indicates that no\ndefinitive indentation can be determined.\n*/\n\n\nvar indentNodeProp = /*@__PURE__*/new NodeProp(); // Compute the indentation for a given position from the syntax tree.\n\nfunction syntaxIndentation(cx, ast, pos) {\n  return indentFrom(ast.resolveInner(pos).enterUnfinishedNodesBefore(pos), pos, cx);\n}\n\nfunction ignoreClosed(cx) {\n  return cx.pos == cx.options.simulateBreak && cx.options.simulateDoubleBreak;\n}\n\nfunction indentStrategy(tree) {\n  var strategy = tree.type.prop(indentNodeProp);\n  if (strategy) return strategy;\n  var first = tree.firstChild,\n      close;\n\n  if (first && (close = first.type.prop(NodeProp.closedBy))) {\n    var last = tree.lastChild,\n        closed = last && close.indexOf(last.name) > -1;\n    return function (cx) {\n      return delimitedStrategy(cx, true, 1, undefined, closed && !ignoreClosed(cx) ? last.from : undefined);\n    };\n  }\n\n  return tree.parent == null ? topIndent : null;\n}\n\nfunction indentFrom(node, pos, base) {\n  for (; node; node = node.parent) {\n    var strategy = indentStrategy(node);\n    if (strategy) return strategy(TreeIndentContext.create(base, pos, node));\n  }\n\n  return null;\n}\n\nfunction topIndent() {\n  return 0;\n}\n/**\nObjects of this type provide context information and helper\nmethods to indentation functions registered on syntax nodes.\n*/\n\n\nvar TreeIndentContext = /*#__PURE__*/function (_IndentContext) {\n  _inherits(TreeIndentContext, _IndentContext);\n\n  function TreeIndentContext(base,\n  /**\n  The position at which indentation is being computed.\n  */\n  pos,\n  /**\n  The syntax tree node to which the indentation strategy\n  applies.\n  */\n  node) {\n    var _this7;\n\n    _classCallCheck(this, TreeIndentContext);\n\n    _this7 = _possibleConstructorReturn(this, _getPrototypeOf(TreeIndentContext).call(this, base.state, base.options));\n    _this7.base = base;\n    _this7.pos = pos;\n    _this7.node = node;\n    return _this7;\n  }\n  /**\n  @internal\n  */\n\n\n  _createClass(TreeIndentContext, [{\n    key: \"continue\",\n\n    /**\n    Continue looking for indentations in the node's parent nodes,\n    and return the result of that.\n    */\n    value: function _continue() {\n      var parent = this.node.parent;\n      return parent ? indentFrom(parent, this.pos, this.base) : 0;\n    }\n  }, {\n    key: \"textAfter\",\n\n    /**\n    Get the text directly after `this.pos`, either the entire line\n    or the next 100 characters, whichever is shorter.\n    */\n    get: function get() {\n      return this.textAfterPos(this.pos);\n    }\n    /**\n    Get the indentation at the reference line for `this.node`, which\n    is the line on which it starts, unless there is a node that is\n    _not_ a parent of this node covering the start of that line. If\n    so, the line at the start of that node is tried, again skipping\n    on if it is covered by another such node.\n    */\n\n  }, {\n    key: \"baseIndent\",\n    get: function get() {\n      var line = this.state.doc.lineAt(this.node.from); // Skip line starts that are covered by a sibling (or cousin, etc)\n\n      for (;;) {\n        var atBreak = this.node.resolve(line.from);\n\n        while (atBreak.parent && atBreak.parent.from == atBreak.from) {\n          atBreak = atBreak.parent;\n        }\n\n        if (isParent(atBreak, this.node)) break;\n        line = this.state.doc.lineAt(atBreak.from);\n      }\n\n      return this.lineIndent(line.from);\n    }\n  }], [{\n    key: \"create\",\n    value: function create(base, pos, node) {\n      return new TreeIndentContext(base, pos, node);\n    }\n  }]);\n\n  return TreeIndentContext;\n}(IndentContext);\n\nfunction isParent(parent, of) {\n  for (var cur = of; cur; cur = cur.parent) {\n    if (parent == cur) return true;\n  }\n\n  return false;\n} // Check whether a delimited node is aligned (meaning there are\n// non-skipped nodes on the same line as the opening delimiter). And\n// if so, return the opening token.\n\n\nfunction bracketedAligned(context) {\n  var tree = context.node;\n  var openToken = tree.childAfter(tree.from),\n      last = tree.lastChild;\n  if (!openToken) return null;\n  var sim = context.options.simulateBreak;\n  var openLine = context.state.doc.lineAt(openToken.from);\n  var lineEnd = sim == null || sim <= openLine.from ? openLine.to : Math.min(openLine.to, sim);\n\n  for (var pos = openToken.to;;) {\n    var next = tree.childAfter(pos);\n    if (!next || next == last) return null;\n    if (!next.type.isSkipped) return next.from < lineEnd ? openToken : null;\n    pos = next.to;\n  }\n}\n/**\nAn indentation strategy for delimited (usually bracketed) nodes.\nWill, by default, indent one unit more than the parent's base\nindent unless the line starts with a closing token. When `align`\nis true and there are non-skipped nodes on the node's opening\nline, the content of the node will be aligned with the end of the\nopening node, like this:\n\n    foo(bar,\n        baz)\n*/\n\n\nfunction delimitedIndent(_ref) {\n  var closing = _ref.closing,\n      _ref$align = _ref.align,\n      align = _ref$align === void 0 ? true : _ref$align,\n      _ref$units = _ref.units,\n      units = _ref$units === void 0 ? 1 : _ref$units;\n  return function (context) {\n    return delimitedStrategy(context, align, units, closing);\n  };\n}\n\nfunction delimitedStrategy(context, align, units, closing, closedAt) {\n  var after = context.textAfter,\n      space = after.match(/^\\s*/)[0].length;\n  var closed = closing && after.slice(space, space + closing.length) == closing || closedAt == context.pos + space;\n  var aligned = align ? bracketedAligned(context) : null;\n  if (aligned) return closed ? context.column(aligned.from) : context.column(aligned.to);\n  return context.baseIndent + (closed ? 0 : context.unit * units);\n}\n/**\nAn indentation strategy that aligns a node's content to its base\nindentation.\n*/\n\n\nvar flatIndent = function flatIndent(context) {\n  return context.baseIndent;\n};\n/**\nCreates an indentation strategy that, by default, indents\ncontinued lines one unit more than the node's base indentation.\nYou can provide `except` to prevent indentation of lines that\nmatch a pattern (for example `/^else\\b/` in `if`/`else`\nconstructs), and you can change the amount of units used with the\n`units` option.\n*/\n\n\nfunction continuedIndent() {\n  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      except = _ref2.except,\n      _ref2$units = _ref2.units,\n      units = _ref2$units === void 0 ? 1 : _ref2$units;\n\n  return function (context) {\n    var matchExcept = except && except.test(context.textAfter);\n    return context.baseIndent + (matchExcept ? 0 : units * context.unit);\n  };\n}\n\nvar DontIndentBeyond = 200;\n/**\nEnables reindentation on input. When a language defines an\n`indentOnInput` field in its [language\ndata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt), which must hold a regular\nexpression, the line at the cursor will be reindented whenever new\ntext is typed and the input from the start of the line up to the\ncursor matches that regexp.\n\nTo avoid unneccesary reindents, it is recommended to start the\nregexp with `^` (usually followed by `\\s*`), and end it with `$`.\nFor example, `/^\\s*\\}$/` will reindent when a closing brace is\nadded at the start of a line.\n*/\n\nfunction indentOnInput() {\n  return EditorState.transactionFilter.of(function (tr) {\n    if (!tr.docChanged || !tr.isUserEvent(\"input.type\") && !tr.isUserEvent(\"input.complete\")) return tr;\n    var rules = tr.startState.languageDataAt(\"indentOnInput\", tr.startState.selection.main.head);\n    if (!rules.length) return tr;\n    var doc = tr.newDoc,\n        head = tr.newSelection.main.head,\n        line = doc.lineAt(head);\n    if (head > line.from + DontIndentBeyond) return tr;\n    var lineStart = doc.sliceString(line.from, head);\n    if (!rules.some(function (r) {\n      return r.test(lineStart);\n    })) return tr;\n    var state = tr.state,\n        last = -1,\n        changes = [];\n\n    var _iterator11 = _createForOfIteratorHelper(state.selection.ranges),\n        _step11;\n\n    try {\n      for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n        var _head = _step11.value.head;\n\n        var _line = state.doc.lineAt(_head);\n\n        if (_line.from == last) continue;\n        last = _line.from;\n        var indent = getIndentation(state, _line.from);\n        if (indent == null) continue;\n        var cur = /^\\s*/.exec(_line.text)[0];\n        var norm = indentString(state, indent);\n        if (cur != norm) changes.push({\n          from: _line.from,\n          to: _line.from + cur.length,\n          insert: norm\n        });\n      }\n    } catch (err) {\n      _iterator11.e(err);\n    } finally {\n      _iterator11.f();\n    }\n\n    return changes.length ? [tr, {\n      changes: changes,\n      sequential: true\n    }] : tr;\n  });\n}\n/**\nA facet that registers a code folding service. When called with\nthe extent of a line, such a function should return a foldable\nrange that starts on that line (but continues beyond it), if one\ncan be found.\n*/\n\n\nvar foldService = /*@__PURE__*/Facet.define();\n/**\nThis node prop is used to associate folding information with\nsyntax node types. Given a syntax node, it should check whether\nthat tree is foldable and return the range that can be collapsed\nwhen it is.\n*/\n\nvar foldNodeProp = /*@__PURE__*/new NodeProp();\n/**\n[Fold](https://codemirror.net/6/docs/ref/#language.foldNodeProp) function that folds everything but\nthe first and the last child of a syntax node. Useful for nodes\nthat start and end with delimiters.\n*/\n\nfunction foldInside(node) {\n  var first = node.firstChild,\n      last = node.lastChild;\n  return first && first.to < last.from ? {\n    from: first.to,\n    to: last.type.isError ? node.to : last.from\n  } : null;\n}\n\nfunction syntaxFolding(state, start, end) {\n  var tree = syntaxTree(state);\n  if (tree.length < end) return null;\n  var inner = tree.resolveInner(end);\n  var found = null;\n\n  for (var cur = inner; cur; cur = cur.parent) {\n    if (cur.to <= end || cur.from > end) continue;\n    if (found && cur.from < start) break;\n    var prop = cur.type.prop(foldNodeProp);\n\n    if (prop && (cur.to < tree.length - 50 || tree.length == state.doc.length || !isUnfinished(cur))) {\n      var value = prop(cur, state);\n      if (value && value.from <= end && value.from >= start && value.to > end) found = value;\n    }\n  }\n\n  return found;\n}\n\nfunction isUnfinished(node) {\n  var ch = node.lastChild;\n  return ch && ch.to == node.to && ch.type.isError;\n}\n/**\nCheck whether the given line is foldable. First asks any fold\nservices registered through\n[`foldService`](https://codemirror.net/6/docs/ref/#language.foldService), and if none of them return\na result, tries to query the [fold node\nprop](https://codemirror.net/6/docs/ref/#language.foldNodeProp) of syntax nodes that cover the end\nof the line.\n*/\n\n\nfunction foldable(state, lineStart, lineEnd) {\n  var _iterator12 = _createForOfIteratorHelper(state.facet(foldService)),\n      _step12;\n\n  try {\n    for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n      var service = _step12.value;\n      var result = service(state, lineStart, lineEnd);\n      if (result) return result;\n    }\n  } catch (err) {\n    _iterator12.e(err);\n  } finally {\n    _iterator12.f();\n  }\n\n  return syntaxFolding(state, lineStart, lineEnd);\n}\n\nfunction mapRange(range, mapping) {\n  var from = mapping.mapPos(range.from, 1),\n      to = mapping.mapPos(range.to, -1);\n  return from >= to ? undefined : {\n    from: from,\n    to: to\n  };\n}\n/**\nState effect that can be attached to a transaction to fold the\ngiven range. (You probably only need this in exceptional\ncircumstances—usually you'll just want to let\n[`foldCode`](https://codemirror.net/6/docs/ref/#language.foldCode) and the [fold\ngutter](https://codemirror.net/6/docs/ref/#language.foldGutter) create the transactions.)\n*/\n\n\nvar foldEffect = /*@__PURE__*/StateEffect.define({\n  map: mapRange\n});\n/**\nState effect that unfolds the given range (if it was folded).\n*/\n\nvar unfoldEffect = /*@__PURE__*/StateEffect.define({\n  map: mapRange\n});\n\nfunction selectedLines(view) {\n  var lines = [];\n\n  var _iterator13 = _createForOfIteratorHelper(view.state.selection.ranges),\n      _step13;\n\n  try {\n    var _loop = function _loop() {\n      var head = _step13.value.head;\n      if (lines.some(function (l) {\n        return l.from <= head && l.to >= head;\n      })) return \"continue\";\n      lines.push(view.lineBlockAt(head));\n    };\n\n    for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n      var _ret = _loop();\n\n      if (_ret === \"continue\") continue;\n    }\n  } catch (err) {\n    _iterator13.e(err);\n  } finally {\n    _iterator13.f();\n  }\n\n  return lines;\n}\n/**\nThe state field that stores the folded ranges (as a [decoration\nset](https://codemirror.net/6/docs/ref/#view.DecorationSet)). Can be passed to\n[`EditorState.toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) and\n[`fromJSON`](https://codemirror.net/6/docs/ref/#state.EditorState^fromJSON) to serialize the fold\nstate.\n*/\n\n\nvar foldState = /*@__PURE__*/StateField.define({\n  create: function create() {\n    return Decoration.none;\n  },\n  update: function update(folded, tr) {\n    folded = folded.map(tr.changes);\n\n    var _iterator14 = _createForOfIteratorHelper(tr.effects),\n        _step14;\n\n    try {\n      var _loop2 = function _loop2() {\n        var e = _step14.value;\n        if (e.is(foldEffect) && !foldExists(folded, e.value.from, e.value.to)) folded = folded.update({\n          add: [foldWidget.range(e.value.from, e.value.to)]\n        });else if (e.is(unfoldEffect)) folded = folded.update({\n          filter: function filter(from, to) {\n            return e.value.from != from || e.value.to != to;\n          },\n          filterFrom: e.value.from,\n          filterTo: e.value.to\n        });\n      };\n\n      for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n        _loop2();\n      } // Clear folded ranges that cover the selection head\n\n    } catch (err) {\n      _iterator14.e(err);\n    } finally {\n      _iterator14.f();\n    }\n\n    if (tr.selection) {\n      var onSelection = false,\n          head = tr.selection.main.head;\n      folded.between(head, head, function (a, b) {\n        if (a < head && b > head) onSelection = true;\n      });\n      if (onSelection) folded = folded.update({\n        filterFrom: head,\n        filterTo: head,\n        filter: function filter(a, b) {\n          return b <= head || a >= head;\n        }\n      });\n    }\n\n    return folded;\n  },\n  provide: function provide(f) {\n    return EditorView.decorations.from(f);\n  },\n  toJSON: function toJSON(folded, state) {\n    var ranges = [];\n    folded.between(0, state.doc.length, function (from, to) {\n      ranges.push(from, to);\n    });\n    return ranges;\n  },\n  fromJSON: function fromJSON(value) {\n    if (!Array.isArray(value) || value.length % 2) throw new RangeError(\"Invalid JSON for fold state\");\n    var ranges = [];\n\n    for (var i = 0; i < value.length;) {\n      var from = value[i++],\n          to = value[i++];\n      if (typeof from != \"number\" || typeof to != \"number\") throw new RangeError(\"Invalid JSON for fold state\");\n      ranges.push(foldWidget.range(from, to));\n    }\n\n    return Decoration.set(ranges, true);\n  }\n});\n/**\nGet a [range set](https://codemirror.net/6/docs/ref/#state.RangeSet) containing the folded ranges\nin the given state.\n*/\n\nfunction foldedRanges(state) {\n  return state.field(foldState, false) || RangeSet.empty;\n}\n\nfunction findFold(state, from, to) {\n  var _a;\n\n  var found = null;\n  (_a = state.field(foldState, false)) === null || _a === void 0 ? void 0 : _a.between(from, to, function (from, to) {\n    if (!found || found.from > from) found = {\n      from: from,\n      to: to\n    };\n  });\n  return found;\n}\n\nfunction foldExists(folded, from, to) {\n  var found = false;\n  folded.between(from, from, function (a, b) {\n    if (a == from && b == to) found = true;\n  });\n  return found;\n}\n\nfunction maybeEnable(state, other) {\n  return state.field(foldState, false) ? other : other.concat(StateEffect.appendConfig.of(codeFolding()));\n}\n/**\nFold the lines that are selected, if possible.\n*/\n\n\nvar foldCode = function foldCode(view) {\n  var _iterator15 = _createForOfIteratorHelper(selectedLines(view)),\n      _step15;\n\n  try {\n    for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n      var _line2 = _step15.value;\n      var range = foldable(view.state, _line2.from, _line2.to);\n\n      if (range) {\n        view.dispatch({\n          effects: maybeEnable(view.state, [foldEffect.of(range), announceFold(view, range)])\n        });\n        return true;\n      }\n    }\n  } catch (err) {\n    _iterator15.e(err);\n  } finally {\n    _iterator15.f();\n  }\n\n  return false;\n};\n/**\nUnfold folded ranges on selected lines.\n*/\n\n\nvar unfoldCode = function unfoldCode(view) {\n  if (!view.state.field(foldState, false)) return false;\n  var effects = [];\n\n  var _iterator16 = _createForOfIteratorHelper(selectedLines(view)),\n      _step16;\n\n  try {\n    for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n      var _line3 = _step16.value;\n      var folded = findFold(view.state, _line3.from, _line3.to);\n      if (folded) effects.push(unfoldEffect.of(folded), announceFold(view, folded, false));\n    }\n  } catch (err) {\n    _iterator16.e(err);\n  } finally {\n    _iterator16.f();\n  }\n\n  if (effects.length) view.dispatch({\n    effects: effects\n  });\n  return effects.length > 0;\n};\n\nfunction announceFold(view, range) {\n  var fold = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var lineFrom = view.state.doc.lineAt(range.from).number,\n      lineTo = view.state.doc.lineAt(range.to).number;\n  return EditorView.announce.of(\"\".concat(view.state.phrase(fold ? \"Folded lines\" : \"Unfolded lines\"), \" \").concat(lineFrom, \" \").concat(view.state.phrase(\"to\"), \" \").concat(lineTo, \".\"));\n}\n/**\nFold all top-level foldable ranges. Note that, in most cases,\nfolding information will depend on the [syntax\ntree](https://codemirror.net/6/docs/ref/#language.syntaxTree), and folding everything may not work\nreliably when the document hasn't been fully parsed (either\nbecause the editor state was only just initialized, or because the\ndocument is so big that the parser decided not to parse it\nentirely).\n*/\n\n\nvar foldAll = function foldAll(view) {\n  var state = view.state,\n      effects = [];\n\n  for (var pos = 0; pos < state.doc.length;) {\n    var _line4 = view.lineBlockAt(pos),\n        range = foldable(state, _line4.from, _line4.to);\n\n    if (range) effects.push(foldEffect.of(range));\n    pos = (range ? view.lineBlockAt(range.to) : _line4).to + 1;\n  }\n\n  if (effects.length) view.dispatch({\n    effects: maybeEnable(view.state, effects)\n  });\n  return !!effects.length;\n};\n/**\nUnfold all folded code.\n*/\n\n\nvar unfoldAll = function unfoldAll(view) {\n  var field = view.state.field(foldState, false);\n  if (!field || !field.size) return false;\n  var effects = [];\n  field.between(0, view.state.doc.length, function (from, to) {\n    effects.push(unfoldEffect.of({\n      from: from,\n      to: to\n    }));\n  });\n  view.dispatch({\n    effects: effects\n  });\n  return true;\n};\n/**\nDefault fold-related key bindings.\n\n - Ctrl-Shift-[ (Cmd-Alt-[ on macOS): [`foldCode`](https://codemirror.net/6/docs/ref/#language.foldCode).\n - Ctrl-Shift-] (Cmd-Alt-] on macOS): [`unfoldCode`](https://codemirror.net/6/docs/ref/#language.unfoldCode).\n - Ctrl-Alt-[: [`foldAll`](https://codemirror.net/6/docs/ref/#language.foldAll).\n - Ctrl-Alt-]: [`unfoldAll`](https://codemirror.net/6/docs/ref/#language.unfoldAll).\n*/\n\n\nvar foldKeymap = [{\n  key: \"Ctrl-Shift-[\",\n  mac: \"Cmd-Alt-[\",\n  run: foldCode\n}, {\n  key: \"Ctrl-Shift-]\",\n  mac: \"Cmd-Alt-]\",\n  run: unfoldCode\n}, {\n  key: \"Ctrl-Alt-[\",\n  run: foldAll\n}, {\n  key: \"Ctrl-Alt-]\",\n  run: unfoldAll\n}];\nvar defaultConfig = {\n  placeholderDOM: null,\n  placeholderText: \"…\"\n};\nvar foldConfig = /*@__PURE__*/Facet.define({\n  combine: function combine(values) {\n    return combineConfig(values, defaultConfig);\n  }\n});\n/**\nCreate an extension that configures code folding.\n*/\n\nfunction codeFolding(config) {\n  var result = [foldState, baseTheme$1];\n  if (config) result.push(foldConfig.of(config));\n  return result;\n}\n\nvar foldWidget = /*@__PURE__*/Decoration.replace({\n  widget: /*@__PURE__*/new ( /*#__PURE__*/function (_WidgetType) {\n    _inherits(_class2, _WidgetType);\n\n    function _class2() {\n      _classCallCheck(this, _class2);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(_class2).apply(this, arguments));\n    }\n\n    _createClass(_class2, [{\n      key: \"toDOM\",\n      value: function toDOM(view) {\n        var state = view.state,\n            conf = state.facet(foldConfig);\n\n        var onclick = function onclick(event) {\n          var line = view.lineBlockAt(view.posAtDOM(event.target));\n          var folded = findFold(view.state, line.from, line.to);\n          if (folded) view.dispatch({\n            effects: unfoldEffect.of(folded)\n          });\n          event.preventDefault();\n        };\n\n        if (conf.placeholderDOM) return conf.placeholderDOM(view, onclick);\n        var element = document.createElement(\"span\");\n        element.textContent = conf.placeholderText;\n        element.setAttribute(\"aria-label\", state.phrase(\"folded code\"));\n        element.title = state.phrase(\"unfold\");\n        element.className = \"cm-foldPlaceholder\";\n        element.onclick = onclick;\n        return element;\n      }\n    }]);\n\n    return _class2;\n  }(WidgetType))()\n});\nvar foldGutterDefaults = {\n  openText: \"⌄\",\n  closedText: \"›\",\n  markerDOM: null,\n  domEventHandlers: {},\n  foldingChanged: function foldingChanged() {\n    return false;\n  }\n};\n\nvar FoldMarker = /*#__PURE__*/function (_GutterMarker) {\n  _inherits(FoldMarker, _GutterMarker);\n\n  function FoldMarker(config, open) {\n    var _this8;\n\n    _classCallCheck(this, FoldMarker);\n\n    _this8 = _possibleConstructorReturn(this, _getPrototypeOf(FoldMarker).call(this));\n    _this8.config = config;\n    _this8.open = open;\n    return _this8;\n  }\n\n  _createClass(FoldMarker, [{\n    key: \"eq\",\n    value: function eq(other) {\n      return this.config == other.config && this.open == other.open;\n    }\n  }, {\n    key: \"toDOM\",\n    value: function toDOM(view) {\n      if (this.config.markerDOM) return this.config.markerDOM(this.open);\n      var span = document.createElement(\"span\");\n      span.textContent = this.open ? this.config.openText : this.config.closedText;\n      span.title = view.state.phrase(this.open ? \"Fold line\" : \"Unfold line\");\n      return span;\n    }\n  }]);\n\n  return FoldMarker;\n}(GutterMarker);\n/**\nCreate an extension that registers a fold gutter, which shows a\nfold status indicator before foldable lines (which can be clicked\nto fold or unfold the line).\n*/\n\n\nfunction foldGutter() {\n  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var fullConfig = Object.assign(Object.assign({}, foldGutterDefaults), config);\n  var canFold = new FoldMarker(fullConfig, true),\n      canUnfold = new FoldMarker(fullConfig, false);\n\n  var _markers = ViewPlugin.fromClass( /*#__PURE__*/function () {\n    function _class3(view) {\n      _classCallCheck(this, _class3);\n\n      this.from = view.viewport.from;\n      this.markers = this.buildMarkers(view);\n    }\n\n    _createClass(_class3, [{\n      key: \"update\",\n      value: function update(_update2) {\n        if (_update2.docChanged || _update2.viewportChanged || _update2.startState.facet(language) != _update2.state.facet(language) || _update2.startState.field(foldState, false) != _update2.state.field(foldState, false) || syntaxTree(_update2.startState) != syntaxTree(_update2.state) || fullConfig.foldingChanged(_update2)) this.markers = this.buildMarkers(_update2.view);\n      }\n    }, {\n      key: \"buildMarkers\",\n      value: function buildMarkers(view) {\n        var builder = new RangeSetBuilder();\n\n        var _iterator17 = _createForOfIteratorHelper(view.viewportLineBlocks),\n            _step17;\n\n        try {\n          for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {\n            var _line5 = _step17.value;\n            var mark = findFold(view.state, _line5.from, _line5.to) ? canUnfold : foldable(view.state, _line5.from, _line5.to) ? canFold : null;\n            if (mark) builder.add(_line5.from, _line5.from, mark);\n          }\n        } catch (err) {\n          _iterator17.e(err);\n        } finally {\n          _iterator17.f();\n        }\n\n        return builder.finish();\n      }\n    }]);\n\n    return _class3;\n  }());\n\n  var domEventHandlers = fullConfig.domEventHandlers;\n  return [_markers, gutter({\n    class: \"cm-foldGutter\",\n    markers: function markers(view) {\n      var _a;\n\n      return ((_a = view.plugin(_markers)) === null || _a === void 0 ? void 0 : _a.markers) || RangeSet.empty;\n    },\n    initialSpacer: function initialSpacer() {\n      return new FoldMarker(fullConfig, false);\n    },\n    domEventHandlers: Object.assign(Object.assign({}, domEventHandlers), {\n      click: function click(view, line, event) {\n        if (domEventHandlers.click && domEventHandlers.click(view, line, event)) return true;\n        var folded = findFold(view.state, line.from, line.to);\n\n        if (folded) {\n          view.dispatch({\n            effects: unfoldEffect.of(folded)\n          });\n          return true;\n        }\n\n        var range = foldable(view.state, line.from, line.to);\n\n        if (range) {\n          view.dispatch({\n            effects: foldEffect.of(range)\n          });\n          return true;\n        }\n\n        return false;\n      }\n    })\n  }), codeFolding()];\n}\n\nvar baseTheme$1 = /*@__PURE__*/EditorView.baseTheme({\n  \".cm-foldPlaceholder\": {\n    backgroundColor: \"#eee\",\n    border: \"1px solid #ddd\",\n    color: \"#888\",\n    borderRadius: \".2em\",\n    margin: \"0 1px\",\n    padding: \"0 1px\",\n    cursor: \"pointer\"\n  },\n  \".cm-foldGutter span\": {\n    padding: \"0 1px\",\n    cursor: \"pointer\"\n  }\n});\n/**\nA highlight style associates CSS styles with higlighting\n[tags](https://lezer.codemirror.net/docs/ref#highlight.Tag).\n*/\n\nvar HighlightStyle = /*#__PURE__*/function () {\n  function HighlightStyle(spec, options) {\n    _classCallCheck(this, HighlightStyle);\n\n    var modSpec;\n\n    function def(spec) {\n      var cls = StyleModule.newName();\n      (modSpec || (modSpec = Object.create(null)))[\".\" + cls] = spec;\n      return cls;\n    }\n\n    var all = typeof options.all == \"string\" ? options.all : options.all ? def(options.all) : undefined;\n    var scopeOpt = options.scope;\n    this.scope = scopeOpt instanceof Language ? function (type) {\n      return type.prop(languageDataProp) == scopeOpt.data;\n    } : scopeOpt ? function (type) {\n      return type == scopeOpt;\n    } : undefined;\n    this.style = tagHighlighter(spec.map(function (style) {\n      return {\n        tag: style.tag,\n        class: style.class || def(Object.assign({}, style, {\n          tag: null\n        }))\n      };\n    }), {\n      all: all\n    }).style;\n    this.module = modSpec ? new StyleModule(modSpec) : null;\n    this.themeType = options.themeType;\n  }\n  /**\n  Create a highlighter style that associates the given styles to\n  the given tags. The specs must be objects that hold a style tag\n  or array of tags in their `tag` property, and either a single\n  `class` property providing a static CSS class (for highlighter\n  that rely on external styling), or a\n  [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style\n  set of CSS properties (which define the styling for those tags).\n  \n  The CSS rules created for a highlighter will be emitted in the\n  order of the spec's properties. That means that for elements that\n  have multiple tags associated with them, styles defined further\n  down in the list will have a higher CSS precedence than styles\n  defined earlier.\n  */\n\n\n  _createClass(HighlightStyle, null, [{\n    key: \"define\",\n    value: function define(specs, options) {\n      return new HighlightStyle(specs, options || {});\n    }\n  }]);\n\n  return HighlightStyle;\n}();\n\nvar highlighterFacet = /*@__PURE__*/Facet.define();\nvar fallbackHighlighter = /*@__PURE__*/Facet.define({\n  combine: function combine(values) {\n    return values.length ? [values[0]] : null;\n  }\n});\n\nfunction getHighlighters(state) {\n  var main = state.facet(highlighterFacet);\n  return main.length ? main : state.facet(fallbackHighlighter);\n}\n/**\nWrap a highlighter in an editor extension that uses it to apply\nsyntax highlighting to the editor content.\n\nWhen multiple (non-fallback) styles are provided, the styling\napplied is the union of the classes they emit.\n*/\n\n\nfunction syntaxHighlighting(highlighter, options) {\n  var ext = [treeHighlighter],\n      themeType;\n\n  if (highlighter instanceof HighlightStyle) {\n    if (highlighter.module) ext.push(EditorView.styleModule.of(highlighter.module));\n    themeType = highlighter.themeType;\n  }\n\n  if (options === null || options === void 0 ? void 0 : options.fallback) ext.push(fallbackHighlighter.of(highlighter));else if (themeType) ext.push(highlighterFacet.computeN([EditorView.darkTheme], function (state) {\n    return state.facet(EditorView.darkTheme) == (themeType == \"dark\") ? [highlighter] : [];\n  }));else ext.push(highlighterFacet.of(highlighter));\n  return ext;\n}\n/**\nReturns the CSS classes (if any) that the highlighters active in\nthe state would assign to the given style\n[tags](https://lezer.codemirror.net/docs/ref#highlight.Tag) and\n(optional) language\n[scope](https://codemirror.net/6/docs/ref/#language.HighlightStyle^define^options.scope).\n*/\n\n\nfunction highlightingFor(state, tags, scope) {\n  var highlighters = getHighlighters(state);\n  var result = null;\n\n  if (highlighters) {\n    var _iterator18 = _createForOfIteratorHelper(highlighters),\n        _step18;\n\n    try {\n      for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {\n        var highlighter = _step18.value;\n\n        if (!highlighter.scope || scope && highlighter.scope(scope)) {\n          var cls = highlighter.style(tags);\n          if (cls) result = result ? result + \" \" + cls : cls;\n        }\n      }\n    } catch (err) {\n      _iterator18.e(err);\n    } finally {\n      _iterator18.f();\n    }\n  }\n\n  return result;\n}\n\nvar TreeHighlighter = /*#__PURE__*/function () {\n  function TreeHighlighter(view) {\n    _classCallCheck(this, TreeHighlighter);\n\n    this.markCache = Object.create(null);\n    this.tree = syntaxTree(view.state);\n    this.decorations = this.buildDeco(view, getHighlighters(view.state));\n  }\n\n  _createClass(TreeHighlighter, [{\n    key: \"update\",\n    value: function update(_update3) {\n      var tree = syntaxTree(_update3.state),\n          highlighters = getHighlighters(_update3.state);\n      var styleChange = highlighters != getHighlighters(_update3.startState);\n\n      if (tree.length < _update3.view.viewport.to && !styleChange && tree.type == this.tree.type) {\n        this.decorations = this.decorations.map(_update3.changes);\n      } else if (tree != this.tree || _update3.viewportChanged || styleChange) {\n        this.tree = tree;\n        this.decorations = this.buildDeco(_update3.view, highlighters);\n      }\n    }\n  }, {\n    key: \"buildDeco\",\n    value: function buildDeco(view, highlighters) {\n      var _this9 = this;\n\n      if (!highlighters || !this.tree.length) return Decoration.none;\n      var builder = new RangeSetBuilder();\n\n      var _iterator19 = _createForOfIteratorHelper(view.visibleRanges),\n          _step19;\n\n      try {\n        for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {\n          var _step19$value = _step19.value,\n              from = _step19$value.from,\n              to = _step19$value.to;\n          highlightTree(this.tree, highlighters, function (from, to, style) {\n            builder.add(from, to, _this9.markCache[style] || (_this9.markCache[style] = Decoration.mark({\n              class: style\n            })));\n          }, from, to);\n        }\n      } catch (err) {\n        _iterator19.e(err);\n      } finally {\n        _iterator19.f();\n      }\n\n      return builder.finish();\n    }\n  }]);\n\n  return TreeHighlighter;\n}();\n\nvar treeHighlighter = /*@__PURE__*/Prec.high( /*@__PURE__*/ViewPlugin.fromClass(TreeHighlighter, {\n  decorations: function decorations(v) {\n    return v.decorations;\n  }\n}));\n/**\nA default highlight style (works well with light themes).\n*/\n\nvar defaultHighlightStyle = /*@__PURE__*/HighlightStyle.define([{\n  tag: tags.meta,\n  color: \"#7a757a\"\n}, {\n  tag: tags.link,\n  textDecoration: \"underline\"\n}, {\n  tag: tags.heading,\n  textDecoration: \"underline\",\n  fontWeight: \"bold\"\n}, {\n  tag: tags.emphasis,\n  fontStyle: \"italic\"\n}, {\n  tag: tags.strong,\n  fontWeight: \"bold\"\n}, {\n  tag: tags.strikethrough,\n  textDecoration: \"line-through\"\n}, {\n  tag: tags.keyword,\n  color: \"#708\"\n}, {\n  tag: [tags.atom, tags.bool, tags.url, tags.contentSeparator, tags.labelName],\n  color: \"#219\"\n}, {\n  tag: [tags.literal, tags.inserted],\n  color: \"#164\"\n}, {\n  tag: [tags.string, tags.deleted],\n  color: \"#a11\"\n}, {\n  tag: [tags.regexp, tags.escape, /*@__PURE__*/tags.special(tags.string)],\n  color: \"#e40\"\n}, {\n  tag: /*@__PURE__*/tags.definition(tags.variableName),\n  color: \"#00f\"\n}, {\n  tag: /*@__PURE__*/tags.local(tags.variableName),\n  color: \"#30a\"\n}, {\n  tag: [tags.typeName, tags.namespace],\n  color: \"#085\"\n}, {\n  tag: tags.className,\n  color: \"#167\"\n}, {\n  tag: [/*@__PURE__*/tags.special(tags.variableName), tags.macroName],\n  color: \"#256\"\n}, {\n  tag: /*@__PURE__*/tags.definition(tags.propertyName),\n  color: \"#00c\"\n}, {\n  tag: tags.comment,\n  color: \"#940\"\n}, {\n  tag: tags.invalid,\n  color: \"#f00\"\n}]);\nvar baseTheme = /*@__PURE__*/EditorView.baseTheme({\n  \"&.cm-focused .cm-matchingBracket\": {\n    backgroundColor: \"#328c8252\"\n  },\n  \"&.cm-focused .cm-nonmatchingBracket\": {\n    backgroundColor: \"#bb555544\"\n  }\n});\nvar DefaultScanDist = 10000,\n    DefaultBrackets = \"()[]{}\";\nvar bracketMatchingConfig = /*@__PURE__*/Facet.define({\n  combine: function combine(configs) {\n    return combineConfig(configs, {\n      afterCursor: true,\n      brackets: DefaultBrackets,\n      maxScanDistance: DefaultScanDist,\n      renderMatch: defaultRenderMatch\n    });\n  }\n});\nvar matchingMark = /*@__PURE__*/Decoration.mark({\n  class: \"cm-matchingBracket\"\n}),\n    nonmatchingMark = /*@__PURE__*/Decoration.mark({\n  class: \"cm-nonmatchingBracket\"\n});\n\nfunction defaultRenderMatch(match) {\n  var decorations = [];\n  var mark = match.matched ? matchingMark : nonmatchingMark;\n  decorations.push(mark.range(match.start.from, match.start.to));\n  if (match.end) decorations.push(mark.range(match.end.from, match.end.to));\n  return decorations;\n}\n\nvar bracketMatchingState = /*@__PURE__*/StateField.define({\n  create: function create() {\n    return Decoration.none;\n  },\n  update: function update(deco, tr) {\n    if (!tr.docChanged && !tr.selection) return deco;\n    var decorations = [];\n    var config = tr.state.facet(bracketMatchingConfig);\n\n    var _iterator20 = _createForOfIteratorHelper(tr.state.selection.ranges),\n        _step20;\n\n    try {\n      for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {\n        var range = _step20.value;\n        if (!range.empty) continue;\n        var match = matchBrackets(tr.state, range.head, -1, config) || range.head > 0 && matchBrackets(tr.state, range.head - 1, 1, config) || config.afterCursor && (matchBrackets(tr.state, range.head, 1, config) || range.head < tr.state.doc.length && matchBrackets(tr.state, range.head + 1, -1, config));\n        if (match) decorations = decorations.concat(config.renderMatch(match, tr.state));\n      }\n    } catch (err) {\n      _iterator20.e(err);\n    } finally {\n      _iterator20.f();\n    }\n\n    return Decoration.set(decorations, true);\n  },\n  provide: function provide(f) {\n    return EditorView.decorations.from(f);\n  }\n});\nvar bracketMatchingUnique = [bracketMatchingState, baseTheme];\n/**\nCreate an extension that enables bracket matching. Whenever the\ncursor is next to a bracket, that bracket and the one it matches\nare highlighted. Or, when no matching bracket is found, another\nhighlighting style is used to indicate this.\n*/\n\nfunction bracketMatching() {\n  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return [bracketMatchingConfig.of(config), bracketMatchingUnique];\n}\n\nfunction matchingNodes(node, dir, brackets) {\n  var byProp = node.prop(dir < 0 ? NodeProp.openedBy : NodeProp.closedBy);\n  if (byProp) return byProp;\n\n  if (node.name.length == 1) {\n    var index = brackets.indexOf(node.name);\n    if (index > -1 && index % 2 == (dir < 0 ? 1 : 0)) return [brackets[index + dir]];\n  }\n\n  return null;\n}\n/**\nFind the matching bracket for the token at `pos`, scanning\ndirection `dir`. Only the `brackets` and `maxScanDistance`\nproperties are used from `config`, if given. Returns null if no\nbracket was found at `pos`, or a match result otherwise.\n*/\n\n\nfunction matchBrackets(state, pos, dir) {\n  var config = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var maxScanDistance = config.maxScanDistance || DefaultScanDist,\n      brackets = config.brackets || DefaultBrackets;\n  var tree = syntaxTree(state),\n      node = tree.resolveInner(pos, dir);\n\n  for (var cur = node; cur; cur = cur.parent) {\n    var matches = matchingNodes(cur.type, dir, brackets);\n    if (matches && cur.from < cur.to) return matchMarkedBrackets(state, pos, dir, cur, matches, brackets);\n  }\n\n  return matchPlainBrackets(state, pos, dir, tree, node.type, maxScanDistance, brackets);\n}\n\nfunction matchMarkedBrackets(_state, _pos, dir, token, matching, brackets) {\n  var parent = token.parent,\n      firstToken = {\n    from: token.from,\n    to: token.to\n  };\n  var depth = 0,\n      cursor = parent === null || parent === void 0 ? void 0 : parent.cursor();\n  if (cursor && (dir < 0 ? cursor.childBefore(token.from) : cursor.childAfter(token.to))) do {\n    if (dir < 0 ? cursor.to <= token.from : cursor.from >= token.to) {\n      if (depth == 0 && matching.indexOf(cursor.type.name) > -1 && cursor.from < cursor.to) {\n        return {\n          start: firstToken,\n          end: {\n            from: cursor.from,\n            to: cursor.to\n          },\n          matched: true\n        };\n      } else if (matchingNodes(cursor.type, dir, brackets)) {\n        depth++;\n      } else if (matchingNodes(cursor.type, -dir, brackets)) {\n        if (depth == 0) return {\n          start: firstToken,\n          end: cursor.from == cursor.to ? undefined : {\n            from: cursor.from,\n            to: cursor.to\n          },\n          matched: false\n        };\n        depth--;\n      }\n    }\n  } while (dir < 0 ? cursor.prevSibling() : cursor.nextSibling());\n  return {\n    start: firstToken,\n    matched: false\n  };\n}\n\nfunction matchPlainBrackets(state, pos, dir, tree, tokenType, maxScanDistance, brackets) {\n  var startCh = dir < 0 ? state.sliceDoc(pos - 1, pos) : state.sliceDoc(pos, pos + 1);\n  var bracket = brackets.indexOf(startCh);\n  if (bracket < 0 || bracket % 2 == 0 != dir > 0) return null;\n  var startToken = {\n    from: dir < 0 ? pos - 1 : pos,\n    to: dir > 0 ? pos + 1 : pos\n  };\n  var iter = state.doc.iterRange(pos, dir > 0 ? state.doc.length : 0),\n      depth = 0;\n\n  for (var distance = 0; !iter.next().done && distance <= maxScanDistance;) {\n    var text = iter.value;\n    if (dir < 0) distance += text.length;\n    var basePos = pos + distance * dir;\n\n    for (var _pos2 = dir > 0 ? 0 : text.length - 1, end = dir > 0 ? text.length : -1; _pos2 != end; _pos2 += dir) {\n      var found = brackets.indexOf(text[_pos2]);\n      if (found < 0 || tree.resolveInner(basePos + _pos2, 1).type != tokenType) continue;\n\n      if (found % 2 == 0 == dir > 0) {\n        depth++;\n      } else if (depth == 1) {\n        // Closing\n        return {\n          start: startToken,\n          end: {\n            from: basePos + _pos2,\n            to: basePos + _pos2 + 1\n          },\n          matched: found >> 1 == bracket >> 1\n        };\n      } else {\n        depth--;\n      }\n    }\n\n    if (dir > 0) distance += text.length;\n  }\n\n  return iter.done ? {\n    start: startToken,\n    matched: false\n  } : null;\n} // Counts the column offset in a string, taking tabs into account.\n// Used mostly to find indentation.\n\n\nfunction countCol(string, end, tabSize) {\n  var startIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  var startValue = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n\n  if (end == null) {\n    end = string.search(/[^\\s\\u00a0]/);\n    if (end == -1) end = string.length;\n  }\n\n  var n = startValue;\n\n  for (var i = startIndex; i < end; i++) {\n    if (string.charCodeAt(i) == 9) n += tabSize - n % tabSize;else n++;\n  }\n\n  return n;\n}\n/**\nEncapsulates a single line of input. Given to stream syntax code,\nwhich uses it to tokenize the content.\n*/\n\n\nvar StringStream = /*#__PURE__*/function () {\n  /**\n  Create a stream.\n  */\n  function StringStream(\n  /**\n  The line.\n  */\n  string, tabSize,\n  /**\n  The current indent unit size.\n  */\n  indentUnit) {\n    _classCallCheck(this, StringStream);\n\n    this.string = string;\n    this.tabSize = tabSize;\n    this.indentUnit = indentUnit;\n    /**\n    The current position on the line.\n    */\n\n    this.pos = 0;\n    /**\n    The start position of the current token.\n    */\n\n    this.start = 0;\n    this.lastColumnPos = 0;\n    this.lastColumnValue = 0;\n  }\n  /**\n  True if we are at the end of the line.\n  */\n\n\n  _createClass(StringStream, [{\n    key: \"eol\",\n    value: function eol() {\n      return this.pos >= this.string.length;\n    }\n    /**\n    True if we are at the start of the line.\n    */\n\n  }, {\n    key: \"sol\",\n    value: function sol() {\n      return this.pos == 0;\n    }\n    /**\n    Get the next code unit after the current position, or undefined\n    if we're at the end of the line.\n    */\n\n  }, {\n    key: \"peek\",\n    value: function peek() {\n      return this.string.charAt(this.pos) || undefined;\n    }\n    /**\n    Read the next code unit and advance `this.pos`.\n    */\n\n  }, {\n    key: \"next\",\n    value: function next() {\n      if (this.pos < this.string.length) return this.string.charAt(this.pos++);\n    }\n    /**\n    Match the next character against the given string, regular\n    expression, or predicate. Consume and return it if it matches.\n    */\n\n  }, {\n    key: \"eat\",\n    value: function eat(match) {\n      var ch = this.string.charAt(this.pos);\n      var ok;\n      if (typeof match == \"string\") ok = ch == match;else ok = ch && (match instanceof RegExp ? match.test(ch) : match(ch));\n\n      if (ok) {\n        ++this.pos;\n        return ch;\n      }\n    }\n    /**\n    Continue matching characters that match the given string,\n    regular expression, or predicate function. Return true if any\n    characters were consumed.\n    */\n\n  }, {\n    key: \"eatWhile\",\n    value: function eatWhile(match) {\n      var start = this.pos;\n\n      while (this.eat(match)) {}\n\n      return this.pos > start;\n    }\n    /**\n    Consume whitespace ahead of `this.pos`. Return true if any was\n    found.\n    */\n\n  }, {\n    key: \"eatSpace\",\n    value: function eatSpace() {\n      var start = this.pos;\n\n      while (/[\\s\\u00a0]/.test(this.string.charAt(this.pos))) {\n        ++this.pos;\n      }\n\n      return this.pos > start;\n    }\n    /**\n    Move to the end of the line.\n    */\n\n  }, {\n    key: \"skipToEnd\",\n    value: function skipToEnd() {\n      this.pos = this.string.length;\n    }\n    /**\n    Move to directly before the given character, if found on the\n    current line.\n    */\n\n  }, {\n    key: \"skipTo\",\n    value: function skipTo(ch) {\n      var found = this.string.indexOf(ch, this.pos);\n\n      if (found > -1) {\n        this.pos = found;\n        return true;\n      }\n    }\n    /**\n    Move back `n` characters.\n    */\n\n  }, {\n    key: \"backUp\",\n    value: function backUp(n) {\n      this.pos -= n;\n    }\n    /**\n    Get the column position at `this.pos`.\n    */\n\n  }, {\n    key: \"column\",\n    value: function column() {\n      if (this.lastColumnPos < this.start) {\n        this.lastColumnValue = countCol(this.string, this.start, this.tabSize, this.lastColumnPos, this.lastColumnValue);\n        this.lastColumnPos = this.start;\n      }\n\n      return this.lastColumnValue;\n    }\n    /**\n    Get the indentation column of the current line.\n    */\n\n  }, {\n    key: \"indentation\",\n    value: function indentation() {\n      return countCol(this.string, null, this.tabSize);\n    }\n    /**\n    Match the input against the given string or regular expression\n    (which should start with a `^`). Return true or the regexp match\n    if it matches.\n    \n    Unless `consume` is set to `false`, this will move `this.pos`\n    past the matched text.\n    \n    When matching a string `caseInsensitive` can be set to true to\n    make the match case-insensitive.\n    */\n\n  }, {\n    key: \"match\",\n    value: function match(pattern, consume, caseInsensitive) {\n      if (typeof pattern == \"string\") {\n        var cased = function cased(str) {\n          return caseInsensitive ? str.toLowerCase() : str;\n        };\n\n        var substr = this.string.substr(this.pos, pattern.length);\n\n        if (cased(substr) == cased(pattern)) {\n          if (consume !== false) this.pos += pattern.length;\n          return true;\n        } else return null;\n      } else {\n        var match = this.string.slice(this.pos).match(pattern);\n        if (match && match.index > 0) return null;\n        if (match && consume !== false) this.pos += match[0].length;\n        return match;\n      }\n    }\n    /**\n    Get the current token.\n    */\n\n  }, {\n    key: \"current\",\n    value: function current() {\n      return this.string.slice(this.start, this.pos);\n    }\n  }]);\n\n  return StringStream;\n}();\n\nfunction fullParser(spec) {\n  return {\n    token: spec.token,\n    blankLine: spec.blankLine || function () {},\n    startState: spec.startState || function () {\n      return true;\n    },\n    copyState: spec.copyState || defaultCopyState,\n    indent: spec.indent || function () {\n      return null;\n    },\n    languageData: spec.languageData || {},\n    tokenTable: spec.tokenTable || noTokens\n  };\n}\n\nfunction defaultCopyState(state) {\n  if (typeof state != \"object\") return state;\n  var newState = {};\n\n  for (var prop in state) {\n    var val = state[prop];\n    newState[prop] = val instanceof Array ? val.slice() : val;\n  }\n\n  return newState;\n}\n/**\nA [language](https://codemirror.net/6/docs/ref/#language.Language) class based on a CodeMirror\n5-style [streaming parser](https://codemirror.net/6/docs/ref/#language.StreamParser).\n*/\n\n\nvar StreamLanguage = /*#__PURE__*/function (_Language2) {\n  _inherits(StreamLanguage, _Language2);\n\n  function StreamLanguage(parser) {\n    var _this10;\n\n    _classCallCheck(this, StreamLanguage);\n\n    var data = defineLanguageFacet(parser.languageData);\n    var p = fullParser(parser),\n        self;\n    var impl = new ( /*#__PURE__*/function (_Parser2) {\n      _inherits(_class4, _Parser2);\n\n      function _class4() {\n        _classCallCheck(this, _class4);\n\n        return _possibleConstructorReturn(this, _getPrototypeOf(_class4).apply(this, arguments));\n      }\n\n      _createClass(_class4, [{\n        key: \"createParse\",\n        value: function createParse(input, fragments, ranges) {\n          return new Parse(self, input, fragments, ranges);\n        }\n      }]);\n\n      return _class4;\n    }(Parser))();\n    _this10 = _possibleConstructorReturn(this, _getPrototypeOf(StreamLanguage).call(this, data, impl, [indentService.of(function (cx, pos) {\n      return _this10.getIndent(cx, pos);\n    })]));\n    _this10.topNode = docID(data);\n    self = _assertThisInitialized(_assertThisInitialized(_this10));\n    _this10.streamParser = p;\n    _this10.stateAfter = new NodeProp({\n      perNode: true\n    });\n    _this10.tokenTable = parser.tokenTable ? new TokenTable(p.tokenTable) : defaultTokenTable;\n    return _this10;\n  }\n  /**\n  Define a stream language.\n  */\n\n\n  _createClass(StreamLanguage, [{\n    key: \"getIndent\",\n    value: function getIndent(cx, pos) {\n      var tree = syntaxTree(cx.state),\n          at = tree.resolve(pos);\n\n      while (at && at.type != this.topNode) {\n        at = at.parent;\n      }\n\n      if (!at) return null;\n      var start = findState(this, tree, 0, at.from, pos),\n          statePos,\n          state;\n\n      if (start) {\n        state = start.state;\n        statePos = start.pos + 1;\n      } else {\n        state = this.streamParser.startState(cx.unit);\n        statePos = 0;\n      }\n\n      if (pos - statePos > 10000\n      /* MaxIndentScanDist */\n      ) return null;\n\n      while (statePos < pos) {\n        var _line6 = cx.state.doc.lineAt(statePos),\n            end = Math.min(pos, _line6.to);\n\n        if (_line6.length) {\n          var stream = new StringStream(_line6.text, cx.state.tabSize, cx.unit);\n\n          while (stream.pos < end - _line6.from) {\n            readToken(this.streamParser.token, stream, state);\n          }\n        } else {\n          this.streamParser.blankLine(state, cx.unit);\n        }\n\n        if (end == pos) break;\n        statePos = _line6.to + 1;\n      }\n\n      var _cx$lineAt = cx.lineAt(pos),\n          text = _cx$lineAt.text;\n\n      return this.streamParser.indent(state, /^\\s*(.*)/.exec(text)[1], cx);\n    }\n  }, {\n    key: \"allowsNesting\",\n    get: function get() {\n      return false;\n    }\n  }], [{\n    key: \"define\",\n    value: function define(spec) {\n      return new StreamLanguage(spec);\n    }\n  }]);\n\n  return StreamLanguage;\n}(Language);\n\nfunction findState(lang, tree, off, startPos, before) {\n  var state = off >= startPos && off + tree.length <= before && tree.prop(lang.stateAfter);\n  if (state) return {\n    state: lang.streamParser.copyState(state),\n    pos: off + tree.length\n  };\n\n  for (var i = tree.children.length - 1; i >= 0; i--) {\n    var child = tree.children[i],\n        pos = off + tree.positions[i];\n    var found = child instanceof Tree && pos < before && findState(lang, child, pos, startPos, before);\n    if (found) return found;\n  }\n\n  return null;\n}\n\nfunction cutTree(lang, tree, from, to, inside) {\n  if (inside && from <= 0 && to >= tree.length) return tree;\n  if (!inside && tree.type == lang.topNode) inside = true;\n\n  for (var i = tree.children.length - 1; i >= 0; i--) {\n    var pos = tree.positions[i],\n        child = tree.children[i],\n        inner = void 0;\n\n    if (pos < to && child instanceof Tree) {\n      if (!(inner = cutTree(lang, child, from - pos, to - pos, inside))) break;\n      return !inside ? inner : new Tree(tree.type, tree.children.slice(0, i).concat(inner), tree.positions.slice(0, i + 1), pos + inner.length);\n    }\n  }\n\n  return null;\n}\n\nfunction findStartInFragments(lang, fragments, startPos, editorState) {\n  var _iterator21 = _createForOfIteratorHelper(fragments),\n      _step21;\n\n  try {\n    for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {\n      var f = _step21.value;\n      var from = f.from + (f.openStart ? 25 : 0),\n          to = f.to - (f.openEnd ? 25 : 0);\n      var found = from <= startPos && to > startPos && findState(lang, f.tree, 0 - f.offset, startPos, to),\n          tree = void 0;\n      if (found && (tree = cutTree(lang, f.tree, startPos + f.offset, found.pos + f.offset, false))) return {\n        state: found.state,\n        tree: tree\n      };\n    }\n  } catch (err) {\n    _iterator21.e(err);\n  } finally {\n    _iterator21.f();\n  }\n\n  return {\n    state: lang.streamParser.startState(editorState ? getIndentUnit(editorState) : 4),\n    tree: Tree.empty\n  };\n}\n\nvar Parse = /*#__PURE__*/function () {\n  function Parse(lang, input, fragments, ranges) {\n    _classCallCheck(this, Parse);\n\n    this.lang = lang;\n    this.input = input;\n    this.fragments = fragments;\n    this.ranges = ranges;\n    this.stoppedAt = null;\n    this.chunks = [];\n    this.chunkPos = [];\n    this.chunk = [];\n    this.chunkReused = undefined;\n    this.rangeIndex = 0;\n    this.to = ranges[ranges.length - 1].to;\n    var context = ParseContext.get(),\n        from = ranges[0].from;\n\n    var _findStartInFragments = findStartInFragments(lang, fragments, from, context === null || context === void 0 ? void 0 : context.state),\n        state = _findStartInFragments.state,\n        tree = _findStartInFragments.tree;\n\n    this.state = state;\n    this.parsedPos = this.chunkStart = from + tree.length;\n\n    for (var i = 0; i < tree.children.length; i++) {\n      this.chunks.push(tree.children[i]);\n      this.chunkPos.push(tree.positions[i]);\n    }\n\n    if (context && this.parsedPos < context.viewport.from - 100000\n    /* MaxDistanceBeforeViewport */\n    ) {\n      this.state = this.lang.streamParser.startState(getIndentUnit(context.state));\n      context.skipUntilInView(this.parsedPos, context.viewport.from);\n      this.parsedPos = context.viewport.from;\n    }\n\n    this.moveRangeIndex();\n  }\n\n  _createClass(Parse, [{\n    key: \"advance\",\n    value: function advance() {\n      var context = ParseContext.get();\n      var parseEnd = this.stoppedAt == null ? this.to : Math.min(this.to, this.stoppedAt);\n      var end = Math.min(parseEnd, this.chunkStart + 2048\n      /* ChunkSize */\n      );\n      if (context) end = Math.min(end, context.viewport.to);\n\n      while (this.parsedPos < end) {\n        this.parseLine(context);\n      }\n\n      if (this.chunkStart < this.parsedPos) this.finishChunk();\n      if (this.parsedPos >= parseEnd) return this.finish();\n\n      if (context && this.parsedPos >= context.viewport.to) {\n        context.skipUntilInView(this.parsedPos, parseEnd);\n        return this.finish();\n      }\n\n      return null;\n    }\n  }, {\n    key: \"stopAt\",\n    value: function stopAt(pos) {\n      this.stoppedAt = pos;\n    }\n  }, {\n    key: \"lineAfter\",\n    value: function lineAfter(pos) {\n      var chunk = this.input.chunk(pos);\n\n      if (!this.input.lineChunks) {\n        var eol = chunk.indexOf(\"\\n\");\n        if (eol > -1) chunk = chunk.slice(0, eol);\n      } else if (chunk == \"\\n\") {\n        chunk = \"\";\n      }\n\n      return pos + chunk.length <= this.to ? chunk : chunk.slice(0, this.to - pos);\n    }\n  }, {\n    key: \"nextLine\",\n    value: function nextLine() {\n      var from = this.parsedPos,\n          line = this.lineAfter(from),\n          end = from + line.length;\n\n      for (var index = this.rangeIndex;;) {\n        var rangeEnd = this.ranges[index].to;\n        if (rangeEnd >= end) break;\n        line = line.slice(0, rangeEnd - (end - line.length));\n        index++;\n        if (index == this.ranges.length) break;\n        var rangeStart = this.ranges[index].from;\n        var after = this.lineAfter(rangeStart);\n        line += after;\n        end = rangeStart + after.length;\n      }\n\n      return {\n        line: line,\n        end: end\n      };\n    }\n  }, {\n    key: \"skipGapsTo\",\n    value: function skipGapsTo(pos, offset, side) {\n      for (;;) {\n        var end = this.ranges[this.rangeIndex].to,\n            offPos = pos + offset;\n        if (side > 0 ? end > offPos : end >= offPos) break;\n        var start = this.ranges[++this.rangeIndex].from;\n        offset += start - end;\n      }\n\n      return offset;\n    }\n  }, {\n    key: \"moveRangeIndex\",\n    value: function moveRangeIndex() {\n      while (this.ranges[this.rangeIndex].to < this.parsedPos) {\n        this.rangeIndex++;\n      }\n    }\n  }, {\n    key: \"emitToken\",\n    value: function emitToken(id, from, to, size, offset) {\n      if (this.ranges.length > 1) {\n        offset = this.skipGapsTo(from, offset, 1);\n        from += offset;\n        var len0 = this.chunk.length;\n        offset = this.skipGapsTo(to, offset, -1);\n        to += offset;\n        size += this.chunk.length - len0;\n      }\n\n      this.chunk.push(id, from, to, size);\n      return offset;\n    }\n  }, {\n    key: \"parseLine\",\n    value: function parseLine(context) {\n      var _this$nextLine = this.nextLine(),\n          line = _this$nextLine.line,\n          end = _this$nextLine.end,\n          offset = 0,\n          streamParser = this.lang.streamParser;\n\n      var stream = new StringStream(line, context ? context.state.tabSize : 4, context ? getIndentUnit(context.state) : 2);\n\n      if (stream.eol()) {\n        streamParser.blankLine(this.state, stream.indentUnit);\n      } else {\n        while (!stream.eol()) {\n          var token = readToken(streamParser.token, stream, this.state);\n          if (token) offset = this.emitToken(this.lang.tokenTable.resolve(token), this.parsedPos + stream.start, this.parsedPos + stream.pos, 4, offset);\n          if (stream.start > 10000\n          /* MaxLineLength */\n          ) break;\n        }\n      }\n\n      this.parsedPos = end;\n      this.moveRangeIndex();\n      if (this.parsedPos < this.to) this.parsedPos++;\n    }\n  }, {\n    key: \"finishChunk\",\n    value: function finishChunk() {\n      var tree = Tree.build({\n        buffer: this.chunk,\n        start: this.chunkStart,\n        length: this.parsedPos - this.chunkStart,\n        nodeSet: nodeSet,\n        topID: 0,\n        maxBufferLength: 2048\n        /* ChunkSize */\n        ,\n        reused: this.chunkReused\n      });\n      tree = new Tree(tree.type, tree.children, tree.positions, tree.length, [[this.lang.stateAfter, this.lang.streamParser.copyState(this.state)]]);\n      this.chunks.push(tree);\n      this.chunkPos.push(this.chunkStart - this.ranges[0].from);\n      this.chunk = [];\n      this.chunkReused = undefined;\n      this.chunkStart = this.parsedPos;\n    }\n  }, {\n    key: \"finish\",\n    value: function finish() {\n      return new Tree(this.lang.topNode, this.chunks, this.chunkPos, this.parsedPos - this.ranges[0].from).balance();\n    }\n  }]);\n\n  return Parse;\n}();\n\nfunction readToken(token, stream, state) {\n  stream.start = stream.pos;\n\n  for (var i = 0; i < 10; i++) {\n    var result = token(stream, state);\n    if (stream.pos > stream.start) return result;\n  }\n\n  throw new Error(\"Stream parser failed to advance stream.\");\n}\n\nvar noTokens = /*@__PURE__*/Object.create(null);\nvar typeArray = [NodeType.none];\nvar nodeSet = /*@__PURE__*/new NodeSet(typeArray);\nvar warned = [];\nvar defaultTable = /*@__PURE__*/Object.create(null);\n\nfor (var _i = 0, _arr = [[\"variable\", \"variableName\"], [\"variable-2\", \"variableName.special\"], [\"string-2\", \"string.special\"], [\"def\", \"variableName.definition\"], [\"tag\", \"tagName\"], [\"attribute\", \"attributeName\"], [\"type\", \"typeName\"], [\"builtin\", \"variableName.standard\"], [\"qualifier\", \"modifier\"], [\"error\", \"invalid\"], [\"header\", \"heading\"], [\"property\", \"propertyName\"]]; _i < _arr.length; _i++) {\n  var _arr$_i = _slicedToArray(_arr[_i], 2),\n      legacyName = _arr$_i[0],\n      name = _arr$_i[1];\n\n  defaultTable[legacyName] = /*@__PURE__*/createTokenType(noTokens, name);\n}\n\nvar TokenTable = /*#__PURE__*/function () {\n  function TokenTable(extra) {\n    _classCallCheck(this, TokenTable);\n\n    this.extra = extra;\n    this.table = Object.assign(Object.create(null), defaultTable);\n  }\n\n  _createClass(TokenTable, [{\n    key: \"resolve\",\n    value: function resolve(tag) {\n      return !tag ? 0 : this.table[tag] || (this.table[tag] = createTokenType(this.extra, tag));\n    }\n  }]);\n\n  return TokenTable;\n}();\n\nvar defaultTokenTable = /*@__PURE__*/new TokenTable(noTokens);\n\nfunction warnForPart(part, msg) {\n  if (warned.indexOf(part) > -1) return;\n  warned.push(part);\n  console.warn(msg);\n}\n\nfunction createTokenType(extra, tagStr) {\n  var tag = null;\n\n  var _iterator22 = _createForOfIteratorHelper(tagStr.split(\".\")),\n      _step22;\n\n  try {\n    for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {\n      var part = _step22.value;\n      var value = extra[part] || tags[part];\n\n      if (!value) {\n        warnForPart(part, \"Unknown highlighting tag \".concat(part));\n      } else if (typeof value == \"function\") {\n        if (!tag) warnForPart(part, \"Modifier \".concat(part, \" used at start of tag\"));else tag = value(tag);\n      } else {\n        if (tag) warnForPart(part, \"Tag \".concat(part, \" used as modifier\"));else tag = value;\n      }\n    }\n  } catch (err) {\n    _iterator22.e(err);\n  } finally {\n    _iterator22.f();\n  }\n\n  if (!tag) return 0;\n  var name = tagStr.replace(/ /g, \"_\"),\n      type = NodeType.define({\n    id: typeArray.length,\n    name: name,\n    props: [styleTags(_defineProperty({}, name, tag))]\n  });\n  typeArray.push(type);\n  return type.id;\n}\n\nfunction docID(data) {\n  var type = NodeType.define({\n    id: typeArray.length,\n    name: \"Document\",\n    props: [languageDataProp.add(function () {\n      return data;\n    })]\n  });\n  typeArray.push(type);\n  return type;\n}\n\nexport { HighlightStyle, IndentContext, LRLanguage, Language, LanguageDescription, LanguageSupport, ParseContext, StreamLanguage, StringStream, TreeIndentContext, bracketMatching, codeFolding, continuedIndent, defaultHighlightStyle, defineLanguageFacet, delimitedIndent, ensureSyntaxTree, flatIndent, foldAll, foldCode, foldEffect, foldGutter, foldInside, foldKeymap, foldNodeProp, foldService, foldState, foldable, foldedRanges, forceParsing, getIndentUnit, getIndentation, highlightingFor, indentNodeProp, indentOnInput, indentRange, indentService, indentString, indentUnit, language, languageDataProp, matchBrackets, syntaxHighlighting, syntaxParserRunning, syntaxTree, syntaxTreeAvailable, unfoldAll, unfoldCode, unfoldEffect };","map":null,"metadata":{},"sourceType":"module"}